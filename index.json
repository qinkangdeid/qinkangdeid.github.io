[{"categories":["折腾"],"content":"[[TOC]] ","date":"2020-08-23","objectID":"/typora-config-picgo/:0:0","tags":["记录"],"title":"Typora设置PicGo图床","uri":"/typora-config-picgo/"},{"categories":["折腾"],"content":"安装PicGo brew cask install picGo ","date":"2020-08-23","objectID":"/typora-config-picgo/:1:0","tags":["记录"],"title":"Typora设置PicGo图床","uri":"/typora-config-picgo/"},{"categories":["折腾"],"content":"配置github图床 仓库：用户名/仓库地址 分支: 存放图片的分支 具体可以直接参考官方教程 我也是去那里扒拉的 这是记录一下 hhhh 新建一个仓库 用于存放图片 生成授权token 为你存放图片的仓库添加授权token用于PicGo操作你的仓库 访问：https://github.com/settings/tokens 然后点击Generate new token ​ 把repo的勾打上即可。然后翻到页面最底部，点击Generate token的绿色按钮生成token **注意：**这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。 配置PicGo ","date":"2020-08-23","objectID":"/typora-config-picgo/:2:0","tags":["记录"],"title":"Typora设置PicGo图床","uri":"/typora-config-picgo/"},{"categories":["折腾"],"content":"安装Typora brew cask install typora ","date":"2020-08-23","objectID":"/typora-config-picgo/:3:0","tags":["记录"],"title":"Typora设置PicGo图床","uri":"/typora-config-picgo/"},{"categories":["折腾"],"content":"配置Typora 上传服务选择PicGo 验证配置是否成功 还可以设置默认的操作，只有粘贴图片就上传到图床 ","date":"2020-08-23","objectID":"/typora-config-picgo/:4:0","tags":["记录"],"title":"Typora设置PicGo图床","uri":"/typora-config-picgo/"},{"categories":["折腾"],"content":"前期矿难就入了一款蜗牛星际的矿机，之前一直安装的是黑裙在使用，也因为已经装了OMV了，体验完了之后看看还有什么用处，正好是双网口， 这颗CPU用来做软路由的也很多。所以就想拿来刷LEDE做软路由用了，也有很多人是PVE上装的LEDE+黑裙，J1900也不强，虽说个人这样使用也是够的。我没有太多的要求要上什么双路由之类的，也不玩虚拟，所以我就实体安装一个就行，以后就都不用动了，只装一个LEDE。 我这里是打算用软路由做主路由，硬路由做AP。软路由对于家用来说，比硬路由更加有优势，也不用愁硬路由那几百M的内存了，而且还有很多插件使用，爽歪歪。 已经有太多人写了很多优秀文章了，一定会有不同的操作或更简单的方法，我也是个小白，所以这里只是我一个实际操作记录。仅供参考 ","date":"2019-05-03","objectID":"/install-koolshare-lede/:0:0","tags":["Router"],"title":"KoolShare-LEDE-x86安装","uri":"/install-koolshare-lede/"},{"categories":["折腾"],"content":"前期准备 x86设备（我这里就是蜗牛J1900） 固件 PE 系统盘（大于8G应该就OK了 我这里是16G的垃圾msata） 显示器 ","date":"2019-05-03","objectID":"/install-koolshare-lede/:1:0","tags":["Router"],"title":"KoolShare-LEDE-x86安装","uri":"/install-koolshare-lede/"},{"categories":["折腾"],"content":"下载固件 固件下载可以直接到官方固件下载：http://firmware.koolshare.cn/LEDE_X64_fw867 )下载,我的msata的硬盘，所以没工具不能扯下来Windows写盘，所以我选择了虚拟机转盘或PE下写盘专用，我选择UEFI方式的启动固件,待会在PE下写盘。 写盘需要用到physdiskwrite这个软件，下载地址见下： 链接: https://pan.baidu.com/s/16nQzGnp9Y8JlOVuSDAqiOA 提取码: vc5t ","date":"2019-05-03","objectID":"/install-koolshare-lede/:2:0","tags":["Router"],"title":"KoolShare-LEDE-x86安装","uri":"/install-koolshare-lede/"},{"categories":["折腾"],"content":"固件写盘 假设你已经有了PE系统了，将之前下载的固件和写盘工具两个一起复制到你的PE盘里。 PE启动盘插入到你的x86机器里，U盘启动进PE。 格式化系统盘 启动DiskGenius对系统盘进行删除所有分区操作 弹出确认窗口 是(Y) 保存更改 之后可以看见系统盘空空如也 将固件写入系统盘 这个时候查看你的PE盘里的固件和写盘工具在PE下的盘符是多少，我的是 U， 然后快捷键win+R在弹出的窗口输入cmd进入命令行（如果你系统盘可以使用其他的介质在Windows上读取的话，就可以不用在PE下制作了） 切换到你的固件所在盘符，我的是 U 之后使用physdiskwrite -u 你的固件名称来刷写进系统盘中，例如我现在的固件名为openwrt-koolshare-mod-v2.30-r10402-51ad900e2c-x86-64-uefi-gpt-squashfs.img.gz 那么我的刷写命令是： physdiskwrite -u openwrt-koolshare-mod-v2.30-r10402-51ad900e2c-x86-64-uefi-gpt-squashfs.img.gz 之后按回车，选择要刷写的系统盘的位置，看准你的系统盘是哪一个了，不要刷错了，我的是在第 0 个位置，所以我选 0 之后会有一个确认提示，确认无误后就填写 y,之后回车 回车之后就开始将固件刷写进系统盘里了，耐心等待，大概需要一两分钟，成功之后会有如下提示： 这个时候固件刷写完毕了，整个过程就完成了。 ","date":"2019-05-03","objectID":"/install-koolshare-lede/:3:0","tags":["Router"],"title":"KoolShare-LEDE-x86安装","uri":"/install-koolshare-lede/"},{"categories":["折腾"],"content":"重启LEDE 现在拔出你的PE启动盘，点击重启，之后你会看见屏幕在刷一大堆日志 刷到最后不动了，例如下面这样就表示启动成功了 之后你随便敲击一下键盘，即可看见logo界面和bash命令行 ","date":"2019-05-03","objectID":"/install-koolshare-lede/:4:0","tags":["Router"],"title":"KoolShare-LEDE-x86安装","uri":"/install-koolshare-lede/"},{"categories":["折腾"],"content":"修改LEDE管理地址 LEDE的默认管理地址是192.168.1.1,这个地址通常也是光猫的管理地址，为了不引起冲突，需要修改LEDE的默认管理地址为其他地址，直接在刚在命令行上修改地址 输入命令vim /etc/config/network,之后按字母i进入编辑模式,将默认的192.168.1.1修改为其他的地址，我这里将其修改为192.168.100.1 之后按:wq!保存退出，粗暴一点，直接再敲击输入reboot重启LEDE。 ","date":"2019-05-03","objectID":"/install-koolshare-lede/:5:0","tags":["Router"],"title":"KoolShare-LEDE-x86安装","uri":"/install-koolshare-lede/"},{"categories":["折腾"],"content":"进入LEDE管理界面 这个时候再次启动了LEDE，可以吧显示器断开软路由机器了，之后将网线插到软路由的一个网口上，进入LEDE后台管理界面，工作机器浏览器输入你刚才修改的LEDE管理地址我这里是192.168.100.1 用户名 root 密码 koolshare 修改wan拨号 如果你想要使用路由拨号，那么你需要修改你的光猫为桥接模式，把拨号工作交给软路由。 软路由有两个网口，一个用来做wan，一个用来做lan口。怎么设置是没所谓的，随便指定一个就好了。 我现在的lan口是eth0,wan口是eth1 进到网络–\u003e接口–\u003eWAN标签下，设置PPPoE拨号,填入你的宽带账号和密码，保存应用即可 等待一小会，去总览就能看见网络信息了 现在你打开网页，应该就可以上网了。 LEDE的软件中心插件真的很多 ","date":"2019-05-03","objectID":"/install-koolshare-lede/:6:0","tags":["Router"],"title":"KoolShare-LEDE-x86安装","uri":"/install-koolshare-lede/"},{"categories":["折腾"],"content":"血来潮就买了一块rock64, 大小就信用卡大小 还可以刷挺多ROM的，这货有千兆网口，关键还有一个USB3口，比树莓派底子好，拿来做简易NAS也是不错的选择 ","date":"2019-02-21","objectID":"/rock64-install-omv/:0:0","tags":["OMV"],"title":"Rock64安装OpenMediaVault","uri":"/rock64-install-omv/"},{"categories":["折腾"],"content":"前期准备 rock64 TF内存卡 读卡器 ","date":"2019-02-21","objectID":"/rock64-install-omv/:1:0","tags":["OMV"],"title":"Rock64安装OpenMediaVault","uri":"/rock64-install-omv/"},{"categories":["折腾"],"content":"安装OMV 下载镜像 rock64有专门制作的OMV镜像：点我直达，两个镜像都差不多，如果是大内存的就选64位的arm64,我买的4G的，所以我选stretch-openmediavault-rock64-0.7.11-1075-arm64.img.xz 制作镜像 烧录软件使用Etcher，三步搞定 很容易 之后，讲TF卡插入rock64卡槽位置，通电，启动即可。 ","date":"2019-02-21","objectID":"/rock64-install-omv/:2:0","tags":["OMV"],"title":"Rock64安装OpenMediaVault","uri":"/rock64-install-omv/"},{"categories":["折腾"],"content":"登陆OMV 刚刚启动会刷一两分钟日志，之后出现登录界面： 用你熟悉的任何方式获取到rock64的IP地址，例如登录终端，查看路由器连接等 rock64的终端用户密码默认为： 用户名: root 密码: openmediavault 获取rock64的IP地址后访问OMV的GUI界面 http://YOUR_IP OMV管理界面的默认用户名密码为： 用户: admin 密码: openmediavault Rock64 的固件已经帮助安装了omv-extras、flashmemory,还是很贴心的。 SSH远程登录话要记得在SSH界面勾选开启 其他配置和X86的无异 ","date":"2019-02-21","objectID":"/rock64-install-omv/:3:0","tags":["OMV"],"title":"Rock64安装OpenMediaVault","uri":"/rock64-install-omv/"},{"categories":["折腾"],"content":"[TOC] ","date":"2019-02-20","objectID":"/omv-add-https/:0:0","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"HTTPS的优点 HTTPS具有更好的加密性能，避免用户信息泄露；﻿﻿ HTTPS复杂的传输方式，降低网站被劫持的风险；﻿﻿ 搜索引擎已经全面支持HTTPS抓取、收录，并且会优先展示HTTPS结果；﻿﻿ HTTPS绿锁表示可以提升用户对网站信任程度；﻿﻿ 可以有效防止山寨、镜像网站等 https相较于http增加了安全性的保障，可以为你的服务增加一道防线，避免被抓包分析。 尤其是OMV的安全信息是明文传输的，类似裸奔的感觉，所以有必要弄一弄。 ","date":"2019-02-20","objectID":"/omv-add-https/:1:0","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"前期准备 公网IP 域名 DDNS绑定 ssl证书 内网服务 nginx (反向代理) ","date":"2019-02-20","objectID":"/omv-add-https/:2:0","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"公网IP 请确认你的宽带网络能够获取到公网IP，不是的先去解决公网IP的问题 ","date":"2019-02-20","objectID":"/omv-add-https/:3:0","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"域名购买 我是在阿里云购买的域名，也可以选择其他免费域名提供商 ","date":"2019-02-20","objectID":"/omv-add-https/:4:0","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"DDNS绑定 DDNS我在梅林上和LEDE安装的插件，梅林的参考https://www.jianshu.com/p/ff10e9a44428 LEDE的也是差不多的，获取阿里云两个key的教程也在https://www.jianshu.com/p/ff10e9a44428 配置参照下面 ","date":"2019-02-20","objectID":"/omv-add-https/:5:0","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"证书申请 阿里云证书 买了阿里云的域名后是可以免费申请证书的，可以参考https://yq.aliyun.com/articles/637307 Let’s Encrypt 这里是免费的证书申请，有效期只有3个月，但是可以无限续签 路由器插件 梅林和LEDE有插件 脚本配置参考这里 ","date":"2019-02-20","objectID":"/omv-add-https/:6:0","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"配置访问 ","date":"2019-02-20","objectID":"/omv-add-https/:7:0","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"内网服务 omv服务 nextcloud 可道云 一切web应用 ","date":"2019-02-20","objectID":"/omv-add-https/:7:1","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"nginx omv的web服务用的web服务器就是一个nginx程序，所以不需要再安装nginx了，只需要配置证书和反向代理就行了 omv的nginx配置文件路径是/etc/nginx/nginx.conf,我们不修改总的配置文件，只需要在conf.d文件夹下新建配置文件即可。 ssh连接到omv机器，cd /etc/nginx/conf.d切换到配置文件路径。 使用二级域名的映射，新建一个配置文件例如vim nextcloud.cof,将下面的配置添加其中 server { listen 443 ssl; # https监听的端口 server_name nextcloud.abcd.com; # https 映射的二级域名 这个就是你申请的域名 ssl on; ssl_certificate /etc/nginx/uhttpd.crt; # 证书路径 ssl_certificate_key /etc/nginx/uhttpd.key; # 证书路径 ssl_session_timeout 5m; access_log /var/log/nginx/nextcloud.log; #日志路径 location / { proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://192.168.100.247:8088; # 反向代理的内网服务IP 端口 } } 之后wq!保存退出。 nginx -t检查配置是否有误,成功如下 之后nginx -s reload使配置生效 之后即可按域名访问内网服务 如果还想反代其他的服务，继续使用二级域名的方式的话，下面的配置都是类似的 新建一个server文件配置 只需要修改server_name和proxy_pass的内容为其他的二级域名和内网服务即可。 ","date":"2019-02-20","objectID":"/omv-add-https/:7:2","tags":["OMV"],"title":"OMV-添加https保护","uri":"/omv-add-https/"},{"categories":["折腾"],"content":"远程访问(公网IP-DDNS方式) [TOC] 宽带有公网IP的前提下，使用DDNS的方式相比于内网穿透的方式要更稳定，不需要依赖服务端的带宽和处理能力，速度也可以跑满上行。 zerotier虽说也可以跑满速，但是会有些缺点： 连接到了下午时候会比较的慢 所有的访问客户端需要安装客户端软件，这是典型的vpn方式，但同时它也更安全一些。 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:0:0","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"前期准备 宽带上网IP为公网IP(最最重要的根源) 光猫改桥接，路由器拨号 一个域名 一台可装DDNS解析插件的路由器或服务器 路由器有 硬路由的梅林 软路由的openwrt 内网在运行的服务 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:1:0","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"获取公网IP ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:2:0","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"查看你的宽带是否是公网IP 首先查看你的路由器或光猫上获取到的IP 访问http://www.ip138.com/ 访问whatismyip 如果上述三个地方的外网IP都是一致的，那么你的宽带就是公网IP的方式 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:2:1","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"尝试获取你宽带的公网IP 这一步是下面所有操作的前提，如果你的宽带没有公网IP，那么你需要联系你的宽带运营商获取，网上也有很多介绍获取的途径方式了，我也搜了挺多的，大概是：联通宽带不好拿，移动就不要想了，电信的就比较容易这样的结论。 不过也稍微注意一下，不要动不动就找客服电话投诉，如果你装宽带的时候你的装机师傅给你留了他的联系方式，你可以先找到装机师傅询问他获取，每个师傅都是有考核的，谁都不喜欢接投诉单，你直接找装机师傅一般都是比较乐意帮忙的，如果他不给或他不能提供的时候，再打10000号找人工申诉获取。 下面就是我询问的经过，师傅爽快也干净利落 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:2:2","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"光猫改桥接 现在装的宽带一般都会默认使用宽带运营商附带的光猫负责拨号上网并兼路由功能（光猫是路由模式），如果要再接一个自己的路由器的话获取到的是一个静态的内网IP（光猫分配的），能够做ddns的设备就不能方便地获取到公网IP。 如果你目前也是这种方式上网，那么你也需要修改光猫模式为桥接模式（只负责传输信号），宽带的拨号工作留给路由器，这样路由器直接就可以获取你的公网IP（通过WAN口）了，熟悉你家里光猫的型号，登录后台管理界面，修改光猫模式为桥接模式。 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:3:0","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"改桥接步骤 电信光猫的型号有很多种，但大体都相同，我目前使用的是TEWA-708G,以我的为例来操作一下。 登陆光猫后台 地址是：http://192.168.1.1:8080 账户密码获取 网上大多文章说一定要拿到超管密码，但是我发现我这个型号不需要，直接使用普通用户进去就可以设置 用户密码就是光猫背面的账户密码了 配置设置向导 只需要配置向导就可以完成桥接配置 选择桥接上网方式 光猫无线网络配置 拨号已经不由光猫来做了，那么无线也不需要它来发射了，关掉它 iTV配置 没有iTV 密码修改 按需设置，我这里不修改了 确认配置项目 确认一下刚才进行的配置，如果没有异议，点击完成即可。 查看配置 点击完成后等待或重启光猫再进入后台查看，业务配置，看到上网方式为桥接即为完成 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:3:1","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"PPPoE拨号上网 拨号设备可以是电脑也可以是路由器，这里就和平常操作步骤一摸一样了，没什么要说的，但是一般都会使用路由器拨号吧，毕竟家里上网设备很多。 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:4:0","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"域名申请 免费域名也有很多地方可以注册，不过还是自己买一个吧，阿里云上随便买一个杂七杂八后缀的域名也不花多少钱,几十块就能用好多年，域名申请 域名申请通过后，创建访问的accessKey和AccessKeySecret,具体是登录阿里云的控制台，在页面右上角，鼠标悬浮到你的头像，出现一个小浮窗，选择accesskeys AccessKey ID 和 AccessKey Secret 推荐使用 子用户AccessKey(访问控制台RAM) 分配的权限，这样权限更少相对来说更安全些 点击会弹出提示，我们还是安全起见，配置一个专门ddns的子用户 点击开始使用子用户AccessKey，起个名字 添加权限 需要配置的权限： AliyunDNSReadOnlyAccess(只读访问云解析(DNS)的权限) AliyunDNSFullAccess(管理云解析(DNS)的权限) 依次搜索配置上去 选择完毕，点击确定 配置accesskey 回到用户管理，点击相应的用户账户进入设置 点击创建accessKey 之后要记得保存好自己的key和密钥信息，DDNS配置的时候就是使用的这些作为账户密码。 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:5:0","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"DDNS配置 这里演示的都是阿里云的域名，其他域名服务商的配置都大同小异 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:6:0","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"梅林配置DDNS 配置ddns 我现在的路由器是刷了小宝梅林的网件R6400，里面有应用市场可以一键安装aliddns。下载完成后会在已安装列表里 下面配置解析，按照下面的图示进行配置，中部的appkey和appsecret就是刚才在阿里云创建AccessKey所获取到的两个字符串 端口转发 路由器外部网络(WAN) –\u003e 端口转发，在这里配置你需要转发的端口 例如 我想转发一个内部的http服务，在基本设置那里选取 http 之后会在端口转发列表那里多一条记录，这里需要配置几项： 本地IP ：你搭建的服务的机器所在内网IP 例如：192.168.5.1 本地通信端口：你搭建的服务的访问端口 例如：9999 通信端口范围：这里就是映射到外网访问的端口了 这里的端口就是要映射内网服务端口到外网去 例如： 8999 就是访问的192.168.5.1:9999的内网服务 配置完着三项点击右边的保存即可映射成功。之后你就可以通过上面配置的域名+端口访问这个内网服务了，例如上面的配置 外网访问链接就是： http://nas.nastemp.abc:8999 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:6:1","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"Openwrt配置DDNS 配置ddns 端口转发 ","date":"2019-02-19","objectID":"/omv-remote-access-ddns/:6:2","tags":["OMV"],"title":"OMV-DDNS访问","uri":"/omv-remote-access-ddns/"},{"categories":["折腾"],"content":"我们将数据放在了NAS里，目前只能是在家通过局域网才能访问数据，但有时候我们不在家里，出门在外也想能够访问家里的数据呢？你可能想： 在工作机上也能访问和同步nextcloud的数据 在线查看我昨晚刚挂的电影 复制下载nas上的一些文档 …………. 所以远程访问数据也显得十分重要。 nas远程访问的方法有很多种，使用哪种方法区别于你自己家里的网络环境是有公网IP还是没有公网IP。 如果家里的宽带没有公网IP，那么就需要做内网穿透，找一台能够有外网IP的服务器VPS之类的转一下数据包。内网穿透的服务也有很多很多，例如花生壳、ngrok、frp、natpp等等。 试用了几个工具之后,frp是比较容器配置的，所以我选择了frp来做穿透 ","date":"2019-02-19","objectID":"/omv-remote-access/:0:0","tags":["OMV"],"title":"OMV内网穿透访问","uri":"/omv-remote-access/"},{"categories":["折腾"],"content":"前期准备 搭建了服务的NAS 具有公网IP的服务器或VPS frp工具（FRP分为服务端和客户端）（github） ","date":"2019-02-19","objectID":"/omv-remote-access/:1:0","tags":["OMV"],"title":"OMV内网穿透访问","uri":"/omv-remote-access/"},{"categories":["折腾"],"content":"FRP服务端配置 这里需要将FRP服务端部在你拥有公网IP的服务器上，我这里放在了我的VPS上 下载FRP(PS:FRP更新好快) 点击这里选择版本下载 我现在用的版本是：frp_0.23.1_linux_amd64.tar.gz 解压命令:tar -zxvf frp_0.23.1_linux_amd64.tar.gz 可以看到frp的文件： 在这里，我们只需要服务端的程序和配置，所以可以删掉客户端的文件，当然 你不删也不会有什么问题，下面配置服务端的配置： frps.ini就是服务端的配置文件，修改它： vi frps.ini 如下面： [common] bind_port = 7000 #这里是绑定的端口 客户端连接和服务端通信就是用的这个端口 vhost_http_port = 8080 #这里是服务的端口 穿透后访问内网的东西就是通过这个端口在外网访问的 subdomain_host = xxxx.com #你的域名配置 如果你的公网IP没有绑定域名的话可不用 不填 auth_token=123 #通信验证token 好了，服务端配置就这几行了，完成后启动服务端： #cd到你的frp目录，然后启动 cd /opt/frp # 运行 /opt/frp/frps -c /opt/frp/frps.ini 可以看到如下日志： 2019/02/27 01:40:07 [I] [service.go:124] frps tcp listen on 0.0.0.0:7000 2019/02/27 01:40:07 [I] [service.go:166] http service listen on 0.0.0.0:8080 2019/02/27 01:40:07 [I] [root.go:204] Start frps success 2019/02/27 01:40:07 [I] [service.go:317] client login info: ip [x.x.x.x:24420] version [0.22.0] hostname [] os [linux] arch [amd64] 2019/02/27 01:40:07 [I] [tcp.go:66] [c37655b3b93a54f5] [ssh6007] tcp proxy listen port [6007] 2019/02/27 01:40:07 [I] [control.go:394] [c37655b3b93a54f5] new proxy [ssh6007] success ","date":"2019-02-19","objectID":"/omv-remote-access/:2:0","tags":["OMV"],"title":"OMV内网穿透访问","uri":"/omv-remote-access/"},{"categories":["折腾"],"content":"FRP客户端配置 FRP的客户端是部在你的内网机器上，也就是你家里的任何一个机器上，可以是路由器或者一台PC或你的NAS上 如上下载frp工具到你的内网机器上，解压，这里我们需要配置客户端，所以frpc.ini是我们这次的重点 修改frpc.ini文件： # frpc.ini客户端配置 [common] server_addr = x.x.x.x # 这里填写你刚才配置的服务端的公网IP 公网IP 公网IP 公网IP~ server_port = 7000 #与服务端的7000端口通信 auth_token = 123 #通信验证token # 下面的就是要穿透的服务了 一个[xxx]开头 算一个服务 多个以此类推 [ssh] type = tcp # 协议类型 ssh选这个 local_ip =x.x.x.x #这里是你内网中开启服务的机器的IP 如果是本机你可以写127.0.0.1 如果不是查看开着服务的机器的内网IP local_port = 22 #代理的内网机器的端口 remote_port = xxxx # 这里是远程的端口 就是服务端所在机器的端口 远程访问就是访问这个端口 [omv] type = http # 协议类型 web选这个 我这里是穿透了OMV的WEB管理界面 local_ip = x.x.x.x #同上描述 local_port = xxxx #同上描述 一个客户端配置就完成了，之后像服务端那样启动客户端 启动完成后查看服务端的日志输出，可以看到客户端已经与服务端通信上了， 这样便穿透成功了，之后访问 公网IP:8080即可访问到你的omv管理界面了 ","date":"2019-02-19","objectID":"/omv-remote-access/:3:0","tags":["OMV"],"title":"OMV内网穿透访问","uri":"/omv-remote-access/"},{"categories":["折腾"],"content":"Nextcloud配置SMTP邮件通知 参考地址：https://www.techrepublic.com/article/how-to-configure-smtp-for-nextcloud/ 官方文档说明：https://docs.nextcloud.com/server/15/admin_manual/configuration_server/email_configuration.html 在Nextcloud的设置选项里有一个邮件服务配置(设置 –\u003e 基本设置 –\u003e 电子邮件服务器)，它能够提供以下功能： 发送密码重置电子邮件 通知用户新文件共享 文件更改和活动通知 以上的功能需要使用到邮件服务器，不过Nextcloud并没有提供可用的SMTP服务器，这个就需要用户们自己配置适用于自己的邮件服务器。我这里使用的是Gmail SMTP服务器。 ","date":"2019-02-18","objectID":"/omv-nextcloud-config-smtp/:0:0","tags":["OMV"],"title":"Nextcloud配置SMTP邮件通知","uri":"/omv-nextcloud-config-smtp/"},{"categories":["折腾"],"content":"前期工作 正在运行的Nextcloud实例(这个必须是有的) 使用具有修改电子邮件服务的用户进行登录nextcloud 一个Gmail帐户 创建一个Google帐户应用密码 创建一个Google账户应用密码点击这里进入 接下来输入一个应用名称方便记忆：nextcloud，之后点击生成 之后会弹出一个弹窗出现应用密码，复制黄色框框里的这个密码备用 ","date":"2019-02-18","objectID":"/omv-nextcloud-config-smtp/:1:0","tags":["OMV"],"title":"Nextcloud配置SMTP邮件通知","uri":"/omv-nextcloud-config-smtp/"},{"categories":["折腾"],"content":"配置nextcloud的邮件服务器 以管理员用户身份登录Nextcloud服务器。单击右上角的个人资料图片，然后从下拉列表中单击设置。在管理(在左边的导航栏中)下，单击基本设置,在这里你就能看到 电子邮件服务器的表单，Nextcloud的SMTP服务器设置，你需要配置以下内容： 发送模式：SMTP 加密：SSL / TLS From address：您将使用的GMail地址。 验证方法：登录 需要验证：启用 服务器地址：smtp.gmail.com 端口：465 凭据：用户名/应用程序密码 配置完所有内容后，单击保存凭据按钮，然后单击发送电子邮件按钮。按照正常预期的话，你现在可以去检查您的电子邮件帐户以查看是否收到测试电子邮件。如果收到测试邮件，则说明配置正确完成了。 收到的测试邮件如下： 以上就是为Nextcloud配置SMTP的全部内容。如果需要使用其他SMTP服务器，您只需简单的改下配置就可以了。网易邮箱可以参考这里 ","date":"2019-02-18","objectID":"/omv-nextcloud-config-smtp/:1:1","tags":["OMV"],"title":"Nextcloud配置SMTP邮件通知","uri":"/omv-nextcloud-config-smtp/"},{"categories":["折腾"],"content":"[TOC] OMV配置你的私有云盘–NextCloud 现在云盘厂家已经所剩无几，你能选的余地已经很少了，是时候找一个私有的云盘解决方案了。你绝对不是第一个有这个想法的人，所以很幸运，在开源的大世界里，已经有人做了出众的产品（Seafile、OwnCloud，NextCloud等等），NextCloud就是其中一款,它的很多东西，都可以来自云端，这也是它如此受欢迎的原因之一。 目前最新版本是Nextcloud 15（15.0.6 ）。 NextCloud 是一款开源网络硬盘系统。任何人都可以自由的获取 NextCloud 程序，在家庭或公司构建私有且免费的网络硬盘。它是完全由你用户控制的私有、安全且功能完整的文件同步与共享解决方案。 下面的步骤需要使用到Docker,如果还没有安装的请先安装，查看OMV配置Docker ","date":"2019-02-18","objectID":"/omv-install-nextcloud/:0:0","tags":["OMV"],"title":"OMV配置你的私有云盘--NextCloud","uri":"/omv-install-nextcloud/"},{"categories":["折腾"],"content":"创建nextcloud配置共享文件夹 安装docker容器时候-v参数有时候要映射宿主机的磁盘地址 OMV的磁盘地址一般映射在 /src下面 具体的硬盘信息可以到 文件系统查看 比如我的硬盘 在我的/src下的地址是： 请记得你自己的磁盘位置 后面的命令需要替换成你自己的磁盘地址 ","date":"2019-02-18","objectID":"/omv-install-nextcloud/:1:0","tags":["OMV"],"title":"OMV配置你的私有云盘--NextCloud","uri":"/omv-install-nextcloud/"},{"categories":["折腾"],"content":"nextcloud需要的配置文件夹 omv提倡文件管理操作都能在WEB界面管理，所以这里使用创建共享文件夹和SMB的方式创建 先创建共享文件夹 访问权限管理 -\u003e 共享文件夹，文件夹尽量见名知意，所以这里就叫nextcloud 进入命令行可以查看创建的文件夹，验证文件夹是否已经创建好 PS: OMV在创建了共享文件夹后，会将共享文件夹映射到一个/sharedfolders的文件路径下，所以你有两种访问你刚才创建的共享文件夹的路径，一个是定位到你磁盘的路径，一个是公共的/sharedfolders下的路径 这两个路径下的操作都是有效的 你可以随便选一个 比如我刚才创建的nextcloud的共享文件夹，我要找到它，可以去两个路径下都能找到 设置nextcloud文件夹的SMB共享 为了使用SMB用户创建nextcloud的其他配置子文件夹 前往服务 -\u003e SMB/CIFS, 设置SMB文件夹 方便我们在工作机上操作 之后在你的工作机上使用SMB协议连接NAS 连接上SMB以后，就可以像操作本地文件一样操作NAS文件了，直接鼠标右键点击创建文件夹操作即可创建一个文件夹， 这里我预先准备一下几个子文件夹,用处如下： db : nextcloud依赖的持久化数据的数据库 html: nextcloud的资源配置文件夹 data: nextcloud的个人同步文件(你网盘的数据以后就存在这里了) 如下 ","date":"2019-02-18","objectID":"/omv-install-nextcloud/:1:1","tags":["OMV"],"title":"OMV配置你的私有云盘--NextCloud","uri":"/omv-install-nextcloud/"},{"categories":["折腾"],"content":"数据库准备 默认情况下，NextCloud使用的是SQLite数据库进行数据存储，它仅适用于没有客户端同步的测试和轻量级单用户设置。当多用户、多设备、大数据量的时候，SQLite就不太合适了，NextCloud支持MySQL，MariaDB，Oracle 11g和PostgreSQL等多种数据库。并且推荐使用MySQL / MariaDB。所以为了一劳永逸，还是用MySQL代替吧，MariaDB是MySQL源代码的一个分支。这里使用MariaDB作为数据库支撑， 安装mariadb mariadb的安装还是使用docker进行， 打开你的终端，复制以下命令创建mariadb容器，即可。如果不想使用命令行安装，需要使用OMV自带的docker-gui界面操作也是可以的，将对应的-*的配置填到相应的界面框框内就可以了，类似的操作可以参考这里 docker run -d --name db_nextcloud \\ -p 3307:3306 \\ -e PUID=1000 \\ -e PGID=100 \\ -e MYSQL_ROOT_PASSWORD=123456 \\ -e MYSQL_DATABASE=nextcloud \\ -e MYSQL_USER=nextcloud \\ -e MYSQL_PASSWORD=123456 \\ --restart=unless-stopped \\ -v /sharedfolders/nextcloud/db:/var/lib/mysql \\ mariadb 命令参数释义(具体的参数释义可以查看镜像地址)： -p 3307:3306: 容器服务开放的端口,前者是宿主机的端口，后者是容器内服务的端口 -e PUID、-e PGID： 运行容器的用户的权限集id -e MYSQL_ROOT_PASSWORD： 数据库root用户的密码 -e MYSQL_DATABASE=nextcloud ：创建一个名称为nextcloud的数据库 -e MYSQL_USER：创建一个名称为nextcloud的用户 -e MYSQL_PASSWORD：名称为nextcloud的用户的密码 --restart=unless-stopped：当容器停止时候重启容器 -v：数据卷绑定 前者是宿主机的地址,后者是容器机器的位置 例如： -v /sharedfolders/nextcloud/db:/var/lib/mysql 把容器/var/lib/mysql的内容挂在到宿主机 /sharedfolders/nextcloud/db的位置 以下是我运行的日志 qinkangdeid@omv:~$ docker run -d --name db_nextcloud \\ \u003e -p 3307:3306 \\ \u003e -e PUID=1000 \\ \u003e -e PGID=100 \\ \u003e -e MYSQL_ROOT_PASSWORD=123456 \\ \u003e -e MYSQL_DATABASE=nextcloud \\ \u003e -e MYSQL_USER=nextcloud \\ \u003e -e MYSQL_PASSWORD=123456 \\ \u003e --restart=unless-stopped \\ \u003e -v /sharedfolders/nextcloud/db:/var/lib/mysql \\ \u003e mariadb Unable to find image 'mariadb:latest' locally latest: Pulling from library/mariadb 38e2e6cd5626: Pull complete 705054bc3f5b: Pull complete c7051e069564: Pull complete 7308e914506c: Pull complete 35e6984cb587: Pull complete 3a173c4702b4: Pull complete efd003ff8e24: Pull complete ba5d30791443: Pull complete f3e943c9e01d: Pull complete e5243a434e4f: Pull complete 910d8b012ee8: Pull complete 1fb787f18e3d: Pull complete 7a0cfbee5299: Pull complete 6fa7c8911619: Pull complete Digest: sha256:eb6acf7f599f39c42582e11b1de3866c3934da84cc45190c0aac3e8d046e4053 Status: Downloaded newer image for mariadb:latest `1be6b4e5f24539e8fc40ca7036a567104b067072044f878a3f4d71104ee8ee9a` qinkangdeid@omv:~$ 查看docker运行容器，看NAMES那一栏下面 有个db_nextcloud已经在运行，也能看到我们配置的端口 qinkangdeid@omv:~$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 1be6b4e5f245 mariadb \"docker-entrypoint.s…\" 14 seconds ago Up 8 seconds 0.0.0.0:3307-\u003e3306/tcp db_nextcloud 5b9d858e08ab opengg/aria2 \"/init.sh\" 24 minutes ago Up 23 minutes 0.0.0.0:6800-\u003e6800/tcp aria2 另一个方式使用telnet验证安装是否成功 ","date":"2019-02-18","objectID":"/omv-install-nextcloud/:2:0","tags":["OMV"],"title":"OMV配置你的私有云盘--NextCloud","uri":"/omv-install-nextcloud/"},{"categories":["折腾"],"content":"安装NextCloud NextCloud的安装也还简单，依然是使用docker，复制下面的命令到终端运行即可 ,记得-v的前部分是你宿主机的地址，如果不想使用命令行安装，需要使用OMV自带的docker-gui界面操作也是可以的，将对应的-*的配置填到相应的界面框框内就可以了，类似的操作可以参考这里 docker run -d --name nextcloud \\ -p 8088:80 \\ --restart=unless-stopped \\ -v /sharedfolders/nextcloud/html:/var/www/html \\ -v /sharedfolders/nextcloud/data:/var/www/html/data \\ nextcloud 命令参数释义(具体的参数释义可以查看镜像地址)： -p 8088:80: 容器服务开放的端口,前者是宿主机的端口，后者是容器内服务的端口 --restart=unless-stopped：当容器停止时候重启容器 -v：数据卷绑定 前者是宿主机的地址,后者是容器机器的位置 Nextcloud安装以及数据库之外的所有数据（文件上载等）都存储在容器地址/var/www/html中，要想持久化你的数据，不通过nextCloud也可以查看的话，应当映射到宿主机的某个位置上 Nextcloud的卷配置还是挺多的，例如配置(config)、数据(data)、主题(themes)等 nextcloud的一些卷地址： /var/www/html 更新所需的主文件夹 /var/www/html/custom_apps你自己手动安装的应用位置 /var/www/html/config 本地配置文件位置 /var/www/html/data 你的网盘数据存放的位置 /var/www/html/themes/\u003cYOU_CUSTOM_THEME\u003e 主题文件位置 以上卷映射我这里只把data单独抽出来了，其他的配置全部默认放在/var/www/html映射的位置里 下面是我的运行日志 qinkangdeid@omv:~$ docker run -d --name nextcloud \\ \u003e -p 8088:80 \\ \u003e --restart=unless-stopped \\ \u003e -v /sharedfolders/nextcloud/html:/var/www/html \\ \u003e -v /sharedfolders/nextcloud/data:/var/www/html/data \\ \u003e nextcloud Unable to find image 'nextcloud:latest' locally latest: Pulling from library/nextcloud 5e6ec7f28fb7: Pull complete cf165947b5b7: Pull complete 7bd37682846d: Extracting [===========================================\u003e ] 58.49MB/67.44MB 7bd37682846d: Pull complete 99daf8e838e1: Pull complete ae320713efba: Pull complete ebcb99c48d8c: Pull complete 9867e71b4ab6: Pull complete 936eb418164a: Pull complete 5d9617dfb66b: Pull complete 8dd7afaae109: Pull complete 8f207844da7e: Pull complete adb3ae5e4987: Pull complete 44d7d07029db: Pull complete fb91064652b0: Pull complete 50923e16d552: Pull complete a7cb9c70c5d2: Pull complete 728e578e40fa: Pull complete 4c3163d09df1: Pull complete 842c4700643d: Downloading [===========================================\u003e ] 35.98MB/41.57MB 842c4700643d: Pull complete cc1964f4bb3e: Pull complete 125e01596295: Pull complete Digest: sha256:a2f2bd57fcfd92b3b6c23b6f34f65d59c9b25e7cc883b1ac67fff01229325692 Status: Downloaded newer image for nextcloud:latest b2b8cb3a61967ba08cb64490c6c8d2a173882560ae22fb0a6a45f895dea36912 例行惯例，查看容器运行： qinkangdeid@omv:~$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b2b8cb3a6196 nextcloud \"/entrypoint.sh apac…\" 42 seconds ago Up 38 seconds 0.0.0.0:8088-\u003e80/tcp nextcloud cb81622828c1 mariadb \"docker-entrypoint.s…\" 7 minutes ago Up 5 minutes 0.0.0.0:3307-\u003e3306/tcp db_nextcloud 5b9d858e08ab opengg/aria2 \"/init.sh\" About an hour ago Up 5 minutes 0.0.0.0:6800-\u003e6800/tcp aria2 ","date":"2019-02-18","objectID":"/omv-install-nextcloud/:3:0","tags":["OMV"],"title":"OMV配置你的私有云盘--NextCloud","uri":"/omv-install-nextcloud/"},{"categories":["折腾"],"content":"访问NextCloud 我把nextcloud的服务端口映射到了宿主机的8088端口上，nextcloud启动后，浏览器输入http://你的IP:8088即可访问nextcloud了。 刚开始的界面如下： 第一项配置是配置日后访问nextcloud的一个管理员用户名和密码 第二项是数据目录，这个我们在运行容器的时候已经指定了位置，所以这里不用动 第三项就是配置外置数据库的连接信息了，将之前我们创建mariadb的信息填写进去，其实这里也可以在安装nextcloud的时候将之前的mariadb容器连接进去，这里就手动填写了。要注意数据库的服务端口如果宿主机和容器端口映射的不一样的话，这里要写宿主机的端口，例如现在我的mariadb容器的服务端口3306映射到了宿主机的3307端口上了，所以这里使用的端口为3307。 所有信息填写完成后，点击安装完成，这一步骤会比较的耗时间，nextcloud需要创建数据库表和一些初始化配置信息 点击安装完成 安装完成后，会自动显示以下界面 里面会有一些默认的示例文件 至此nextcloudu已经安装完成，你可以继续探索NextCloud所拥有的功能。 ","date":"2019-02-18","objectID":"/omv-install-nextcloud/:4:0","tags":["OMV"],"title":"OMV配置你的私有云盘--NextCloud","uri":"/omv-install-nextcloud/"},{"categories":["折腾"],"content":"拓展安装方式 PS: 上面的安装方式需要在第一次启动访问nextcloud的时候配置数据库连接、数据卷地址，下面的方式可以减少这个步骤 也就是可以减少下面这张图的配置情况： docker可以使用 –link 连接另外一个容器的配置 nextcloud也支持通过环境变量自动配置 可以在首次运行nextcloud容器时预先配置安装页面上询问的所有内容。要启用自动配置， 可以通过以下环境变量设置数据库连接。但是只能使用一种数据库类型！ Nextcloud目前所支持的环境变量自动配置如下： 配置数据库的环境变量 针对选用SQLITE_DATABASE数据库的参数: SQLITE_DATABASE: 使用SQLite数据库时候的数据库名称(我们不适用这个数据库所以不用带这个参数) 针对选用MYSQL/MariaDB数据库的参数: MYSQL_DATABASE: 要使用的数据库的名称 在这里和之前创建的mariadb容器 的数据库一直db_nextcloud MYSQL_USER:数据库用户名 MYSQL_PASSWORD 数据库用户名密码 MYSQL_HOST : 配置的数据库容器的名称docker run -d --name db_nextcloud 的--name参数指定的名称，也就是db_nextcloud 针对选用PostgreSQL数据库的参数: POSTGRES_DB :postgres数据库的名称 POSTGRES_USER :postgres数据库用户名 POSTGRES_PASSWORD postgres数据库用户的密码(对应上面用户名的密码) POSTGRES_HOST:配置的数据库容器的名称 配置Nextcloud 管理员用户密码的环境变量 NEXTCLOUD_ADMIN_USER :管理员用户名 NEXTCLOUD_ADMIN_PASSWORD:管理员密码 配置Nextcloud 数据文件地址和表名前缀的环境变量 NEXTCLOUD_DATA_DIR : nextcloud数据存放的位置(默认路径是: /var/www/html/data) 这个不设我们还可以使用-v参数来映射 NEXTCLOUD_TABLE_PREFIX: nextcloud依赖的数据库表表名前缀 (默认是: \"\") 可选操作 一般也不会设啦 所以创建nextcloud容器的方式就稍稍有些变化了，可以根据上面的环境变量自由添加，环境变量使用-e追加，我这里只配置数据库的环境变量，如下命令所示： docker run -d --name nextcloud \\ --link db_nextcloud:db_nextcloud \\ -p 8088:80 \\ -p 4433:443 \\ -e PUID=1000 \\ -e PGID=100 \\ -v /sharedfolders/nextcloud/html:/var/www/html \\ -v /sharedfolders/nextcloud/data:/var/www/html/data \\ -e MYSQL_DATABASE=nextcloud \\ -e MYSQL_USER=nextcloud \\ -e MYSQL_PASSWORD=123456 \\ -e MYSQL_HOST=db_nextcloud \\ --restart=unless-stopped \\ nextcloud 我的执行日志： root@omv:/sharedfolders/nextcloud# docker run -d --name nextcloud \\ \u003e --link db_nextcloud:db_nextcloud \\ \u003e -p 8088:80 \\ \u003e -e PUID=1000 \\ \u003e -e PGID=100 \\ \u003e -v /sharedfolders/nextcloud/html:/var/www/html \\ \u003e -v /sharedfolders/nextcloud/data:/var/www/html/data \\ \u003e -e MYSQL_DATABASE=nextcloud \\ \u003e -e MYSQL_USER=nextcloud \\ \u003e -e MYSQL_PASSWORD=123456 \\ \u003e -e MYSQL_HOST=db_nextcloud \\ \u003e --restart=unless-stopped \\ \u003e nextcloud Unable to find image 'nextcloud:latest' locally latest: Pulling from library/nextcloud 27833a3ba0a5: Already exists 2d79f6773a3c: Already exists f5dd9a448b82: Already exists 95719e57e42b: Already exists cc75e951030f: Already exists 78873f480bce: Already exists 1b14116a29a2: Already exists 887fc426d9b4: Pull complete e8a2a7e68e47: Pull complete 44116bd4b499: Pull complete 5a7ed133cf7c: Pull complete a0cc2e7ce3b9: Pull complete 3ea943f2a6e6: Pull complete dc6fe404fa96: Pull complete 2970a87ebdd8: Pull complete 632923a6d419: Pull complete 78f88b7ec6fe: Pull complete a62deb12226c: Pull complete 30d2885ecc94: Pull complete 5c72c2211abe: Pull complete Digest: sha256:e4c59de7d564a7cec680d32ebed64bb7a7c53859d1c9dd6ef21912183719b203 Status: Downloaded newer image for nextcloud:latest 8aa333d93a38589c758efd44db429b28e65301205516d940c5e772212ce09b77 root@omv:/sharedfolders/nextcloud# 之后nextcloud启动，第一次访问nextcloud就出现如下画面： 数据库和数据卷的配置没了，只需要创建一个管理员账户即可 ","date":"2019-02-18","objectID":"/omv-install-nextcloud/:5:0","tags":["OMV"],"title":"OMV配置你的私有云盘--NextCloud","uri":"/omv-install-nextcloud/"},{"categories":["折腾"],"content":"OMV提供了一个Docker的可视化插件 方便用户进行图形化配置docker容器 如果你还没有在OMV开启Docker,请参照这里开启 进行Docker容器的安装一般就几个步骤： 去镜像网站确定你要安装的容器的地址(官网镜像网站) 拉取镜像 部署镜像 下面以jellyfin个人多媒体管理为例，所有的容器软件安装都是一样的，只是在部署容器的参数有所不同 ","date":"2019-02-17","objectID":"/omv-install-jellyfin/:0:0","tags":["OMV"],"title":"OMV安装jellyfin","uri":"/omv-install-jellyfin/"},{"categories":["折腾"],"content":"查找镜像 确定你要安装的镜像的地址，去官网镜像网站搜索镜像，一般优先查找官方的就行了或最受欢迎的镜像： 镜像网站上的Overview你可以稍微看下，因为那里介绍了容器运行的一些可以配置的参数，如果知道看Dockerfile的话，也可以知道容器有多少配置项了 ","date":"2019-02-17","objectID":"/omv-install-jellyfin/:0:1","tags":["OMV"],"title":"OMV安装jellyfin","uri":"/omv-install-jellyfin/"},{"categories":["折腾"],"content":"拉取镜像 可以看到 jellyfin/jellyfin就是官方的源了，我们去OMV的docker-gui界面拉取镜像 如上配置后，点击开始即可拉取镜像 拉取完成后： 点击右上角的更新，即可刷新查看我们拉取的镜像已经在镜像列表中了 ","date":"2019-02-17","objectID":"/omv-install-jellyfin/:0:2","tags":["OMV"],"title":"OMV安装jellyfin","uri":"/omv-install-jellyfin/"},{"categories":["折腾"],"content":"部署镜像 最后一步就是部署镜像了，docker提供了-v参数可以把容器里的数据卷映射到宿主机(就是我们OMV的机器),当我们安装容器软件时，有一些配置文件或者软件数据我们希望在宿主机上就可以方便的进行编辑和查看，那么我们就需要将它们映射出来，所以最好在你的宿主机上创建一个应用数据的共享文件夹，用来存放各类软件的配置文件和数据，OMV创建共享文件夹的方法可见这里 在docker-gui界面上选中镜像并点击部署镜像 例如我配置和容器的端口一样的宿主机端口，一定要点击右边的加号 添加才行！！！！不然不会被保存 点击右边的加号之后 环境变量这一栏 可以看容器介绍有没有特殊的环境变量要设置 如果没有就不用设置 但最好配置一下宿主机启动容器所使用的用户的角色ID(PGUD和PUID) 首先查看你用户的PGID/PUID 命令行输入 id 你的用户名即可出来 # 使用 id {your_username} 命令查看即可 qinkangdeid@omv:~$ id qinkangdeid uid=1000(qinkangdeid) gid=100(users) 组=100(users),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),33(www-data),44(video),46(plugdev),108(netdev),110(ssh),1000(qinkangdeid),997(openmediavault-webgui),996(docker) 例如我的uid=1000 gid=100(users) uid对应PUID gid对应PGID 下面就是数据卷的绑定，这里就是把容器里的数据卷映射到宿主机上的配置，容器可以配什么数据卷一般在其镜像网站上的Overview上有介绍，如果没有介绍 你可以在数据卷打上\\就会有提示这个容器要配置什么数据卷 可以看到jellyfin一般需要配置三个数据卷: /cache：缓存目录 /config：配置文件目录 /media：多媒体目录 下面是我配置映射的宿主机共享文件夹的路径 一般其他的配置容器没有特殊说明，就都不用配置了，之后点击保存，容器会被运行起来 然后看到docker-gui下面的Docker容器一栏，点击更新 即可看见我们刚才创建的容器的状态了 jellyfin的服务端口是8096 宿主机映射出来的也是8096 所以我们这个时候可以访问服务，访问服务是访问的宿主机的端口，所以你宿主机映射的端口和容器内的不一样，记得改成宿主机的端口 访问 http://YOUR_IP:8096即可访问jellyfin的服务了 以下是我完成配置向导后的界面，如果你是第一次访问需要配置一些常规设置 ","date":"2019-02-17","objectID":"/omv-install-jellyfin/:0:3","tags":["OMV"],"title":"OMV安装jellyfin","uri":"/omv-install-jellyfin/"},{"categories":["折腾"],"content":"docker属于omv拓展(omv-extras)插件，如果没有安装拓展包是搜索不到的，如果你还没有安装omv-extras的话，请先安装OMV安装omv-extras Docker真是一个强大的支持，后面要用的很多软件都会优先选择docker的版本 ","date":"2019-02-16","objectID":"/omv-install-docker/:0:0","tags":["OMV"],"title":"OMV配置Docker","uri":"/omv-install-docker/"},{"categories":["折腾"],"content":"启用Docker服务 找到系统 —\u003e OMV-Extras开启DockerCE库 之后点击启用，保存即可 稍等片刻，安装完成，即可看见已启动一栏变绿 至此，Docker环境已经创建好了。 ","date":"2019-02-16","objectID":"/omv-install-docker/:1:0","tags":["OMV"],"title":"OMV配置Docker","uri":"/omv-install-docker/"},{"categories":["折腾"],"content":"安装docker-gui插件 OMV还额外提供一个GUI界面管理docker镜像 一样的找到系统 ---\u003e 插件如往常一样安装上即可，这个插件安装可能有点久 之后在服务下就会多一个Docker标签 开启Docker-GUI docker镜像的默认位置是/var/lib/docker下，如果你想修改默认位置，那就选择第二红框，将位置修改，这里我创建了一个docker-base文件夹 安装完docker之后报错解决 error message: Failed to execute XPath query ‘/config/services/docker’. 输入以下命令解决参考 # apt-get purge openmediavault-docker-gui # apt-get install openmediavault-docker-gui ","date":"2019-02-16","objectID":"/omv-install-docker/:2:0","tags":["OMV"],"title":"OMV配置Docker","uri":"/omv-install-docker/"},{"categories":["折腾"],"content":"将GUI用户添加到docker组 docker安装好后，默认只有root用户可以启用，如果你想非root启用docker的话，就需要将用户添加到docker组 WEB界面添加 切换到访问权限管理---\u003e用户 选中你要添加进组的用户，点击编辑 在弹出的窗口再切换到用户组的标签，将docker勾选上 使用你的非root用户就可以使用docker的命令了： ","date":"2019-02-16","objectID":"/omv-install-docker/:3:0","tags":["OMV"],"title":"OMV配置Docker","uri":"/omv-install-docker/"},{"categories":["折腾"],"content":"[TOC] 可道云是一款云端文档管理软件，开源的，基于PHP开发。 为了方便管理，我这里特地新建了一个共享文件夹，专门存放应用的配置文件,我这里选择创建appdata文件夹，创建共享文件夹的方式可见这里 OMV的磁盘地址一般映射在 /srv下面 具体的硬盘信息可以查看 文件系统查看 比如我的硬盘 在我的/srv下的地址是： 请记得你自己的磁盘位置 后面的命令需要替换成你自己的磁盘地址 所以我的appdata文件夹的位置是：/srv/dev-disk-by-label-kulh2t/appdata,我将会在这个文件夹下新建一个子文件夹kodexplorer来存放可道云的资源文件，你可以选择你愿意存放的地址存放 这里记录下我实践后的两种安装方法： 使用OMV插件nginx安装 docker安装 ","date":"2019-02-15","objectID":"/omv-install-kodexplorer/:0:0","tags":["OMV"],"title":"OMV安装可道云(kodexplorer)","uri":"/omv-install-kodexplorer/"},{"categories":["折腾"],"content":"方法一：使用OMV插件nginx安装 ","date":"2019-02-15","objectID":"/omv-install-kodexplorer/:1:0","tags":["OMV"],"title":"OMV安装可道云(kodexplorer)","uri":"/omv-install-kodexplorer/"},{"categories":["折腾"],"content":"前期准备 下载nginx插件 nginx属于omv拓展(omv-extras)插件，如果没有安装拓展包是搜索不到的，如果你还没有安装omv-extras的话，请先安装OMV安装omv-extras 系统 —\u003e 插件 —\u003e搜索nginx 安装完刷新页面即可看到服务 创建一个Pools 这里要注意，我这里选择的pools的用户和用户所在组是qinkangdeid和www-data，选取的用户一定是要在www-data组下，不然访问不到，这个时候需要将用户加到你指定的pools的组别下面 要查看你的用户 属于哪些组 可以使用 id USER_NAME查看，例如： 如果你所选的用户还不在你所选的组下，可以将这个用户加入改组中 将一个已有用户增加到一个已有用户组中,使用 usermod命令， 完整的命令：usermod -aG group_name user_name（将group_name和user_name替换成你的目标组和目标即可。） 例如：usermod -aG www-data qinkangdeid 切到Server，编辑服务器 开启nginx服务 web服务已经准备好了，下面开始安装应用 ","date":"2019-02-15","objectID":"/omv-install-kodexplorer/:1:1","tags":["OMV"],"title":"OMV安装可道云(kodexplorer)","uri":"/omv-install-kodexplorer/"},{"categories":["折腾"],"content":"安装文件管理 # cd到指定目录 你可以cd到指定你想要安装的位置 cd /srv/dev-disk-by-label-kulh2t/appdata/kodexplorer # 下载web文件 wget http://static.kodcloud.com/update/download/kodexplorer4.37.zip # 安装unzip 已经安装忽略 apt-get install unzip # 解压 unzip kodexplorer4.37.zip # 赋予权限 chmod -Rf 777 ./* ","date":"2019-02-15","objectID":"/omv-install-kodexplorer/:1:2","tags":["OMV"],"title":"OMV安装可道云(kodexplorer)","uri":"/omv-install-kodexplorer/"},{"categories":["折腾"],"content":"方法二：使用Docker安装 docker安装的好处是不用管依赖的问题，非常方便也非常容易安装。 这里使用的是我根据网上大佬们的Dockfile修改一点东西得来的镜像 数据卷有两个： /var/www/html: 这个PHP环境静态资源的存放路径，可道云的配置文件后面就是放到了这里，整个docker是一个php环境，所以以后还有静态的资源，都是可以放在这里访问的 /data: 数据映射位置 ，容器里的可道云只能访问容器里的数据，所以要想访问宿主机也就是你NAS机器上的数据， 就需要将宿主机的数据路径映射到容器里面 拉取镜像 在Parameters处填写要拉取镜像的出处：这里我拉的是：qinkangdeid/kodexplorer 等待一会，拉取完成，即可查看： 下面是运行容器： 选中刚才拉取的镜像，点击Run Image： 配置运行： 之后点击保存运行容器，之后可以看到运行的容器： 不想用Docker可视化界面操作的话，也可以使用下面的命令一键安装运行容器，命令执行完成后，在docker可视化界面都能看到容器的状态 复制下面的命令到终端执行 PS：记得替换你的宿主机路径 docker run -d -p 9000:80 --name kodexplorer \\ -v /srv/dev-disk-by-label-kulh2t/appdata/www:/var/www/html \\ -v /srv:/data \\ qinkangdeid/kodexplorer ","date":"2019-02-15","objectID":"/omv-install-kodexplorer/:2:0","tags":["OMV"],"title":"OMV安装可道云(kodexplorer)","uri":"/omv-install-kodexplorer/"},{"categories":["折腾"],"content":"访问可道云 访问路径：http://你的IP:9000/kodexplorer 注意刚才设置的9000端口访问的基文件夹是appdata,appdata下面创建了一个kodexplorer文件夹存放可道云的资源文件，所以访问可道云的时候需要再加上kodexplorer，如果你直接解压在appdata文件夹下面，则不需要加了，为了少开端口，以后还有什么web应用，我都是放在appdata下面的，加一个文件夹区分应用就好了 当你第一次打开的时候，应该看见如下界面，会提示一个错误， PS: docker方式安装不会有这个错误 # 那是因为我们没有安装phpGD库环境 error: 须开启php GD库,否则验证码、缩略图使用将不正常 解决： apt-get install php7.0-gd 重新刷新一下界面，看到已经恢复正常 这里要设置管理员密码，设置你的管理员密码，然后确定，页面自动刷新到新的登录页 这里无需多言，填写你刚才的用户密码登录吧 登录完之后，安全起见，在用户管理里把其他两个用户禁用/删除（当然，如果你想保留，也是可以的） 删除/禁用多余的用户 这就是可道云的文件管理界面了 Docker方式安装的注意：运行容器的时候/data映射到了宿主机的磁盘位置，所以你要查看宿主机的文件，应当去/data下访问 还有一个看似很吊的桌面，不过我没用过 PS: 在用可道云的时候，你可能发现有些目录只能只读而不能写，这是因为OMV的权限设置不允许，可道云的运行用户和组是www-data,所以需要把用户和组别加入到共享文件夹中 比如我现在的一个硬盘的downloads共享文件夹现在是只读状态 前往 访问权限控制管理 –\u003e 共享文件夹 对共享文件夹进项ALC权限控制 如下 将要允许访问的共享文件夹把www-data的用户和组别加上访问权限即可，如下图，最后点击应用 现在刷新可道云的文件管理，可以看到 只读标志 已经消失 ： ","date":"2019-02-15","objectID":"/omv-install-kodexplorer/:3:0","tags":["OMV"],"title":"OMV安装可道云(kodexplorer)","uri":"/omv-install-kodexplorer/"},{"categories":["折腾"],"content":"[TOC] Aria2是一款非常棒的多线程下载工具，最最关键的是，它支持百度的下载，相信这一定是广大网友的福音 下面的步骤需要使用到Docker,如果还没有安装的请先安装，查看OMV配置Docker 这里我们使用docker进行安装aria2，很小，只包含一个daemon进程 首先查看你用户的PGID/PUID， # 使用 id {your_username} 命令查看即可 qinkangdeid@omv:~$ id qinkangdeid uid=1000(qinkangdeid) gid=100(users) 组=100(users),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),33(www-data),44(video),46(plugdev),108(netdev),110(ssh),1000(qinkangdeid),997(openmediavault-webgui),996(docker) 例如我的uid=1000 gid=100(users) uid=1000(qinkangdeid) gid=100(users) 就是你想要的了 ","date":"2019-02-13","objectID":"/omv-install-aria2/:0:0","tags":["OMV"],"title":"OMV配置Aria2","uri":"/omv-install-aria2/"},{"categories":["折腾"],"content":"命令行安装 docker run \\ -d \\ --name aria2 \\ -p 6800:6800 \\ -u=1000:100\\ --restart=unless-stopped \\ -v /srv/dev-disk-by-label-kulh2t/appdata/aria2/config:/config \\ -v /srv/dev-disk-by-label-kulh2t/downloads:/downloads \\ opengg/aria2 容器数据卷地址： /config: aria2配置文件和日志文件地址 /downloads： aria2下载存放地址 我计划是将以上两个容器路径映射到我的宿主机硬盘的两个地址上： /srv/dev-disk-by-label-kulh2t/appdata/aria2/config : /config /srv/dev-disk-by-label-kulh2t/downloads:/downloads 你可以映射到你想映射的位置，只有保证文件夹有权限读取即可 命令参数释义： -d : 镜像以后台方式运行 —name : 镜像的名字 可以随便起你觉得容易识别的名称 -p : aria2进程的服务端口 :前面是指代宿主机(你安装OMV的实体机器)的端口;:后面是容器里的进程端口号 -u: 就是刚才我们获取到的用户的PUID:PGID -v : 数据卷映射 和-p一样的 前者是宿主机的路径 后者是容器的路径 —restart: Docker容器的重启策略 容器的重启策略 Docker容器的重启策略是面向生产环境的一个启动策略，在开发过程中可以忽略该策略。 Docker容器的重启都是由Docker守护进程完成的，因此与守护进程息息相关。 Docker容器的重启策略如下： no，默认策略，在容器退出时不重启容器 on-failure，在容器非正常退出时（退出状态非0），才会重启容器 on-failure:3，在容器非正常退出时重启容器，最多重启3次 always，在容器退出时总是重启容器 unless-stopped，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器 我们将上面的命令复制到命令行窗口执行： 记得将两个 —v的路径映射到你的宿主机地址上 等待镜像下载并运行，执行完成后： 使用docker ps命令查看容器运行没有 可以看到，aria2的docker镜像已经在运行了 去查看我们刚才配置的aria2的配置文件路径： 可以看到，当容器运行起来的时候，已经为我们创建了需要的配置文件，这里主要是aria2.conf文件,我们查看一下默认的内容： save-session=/config/aria2.session input-file=/config/aria2.session save-session-interval=60 dir=/downloads file-allocation=prealloc disk-cache=128M enable-rpc=true rpc-listen-port=6800 rpc-allow-origin-all=true rpc-listen-all=true rpc-secret=\u003cpassword\u003e auto-file-renaming=false max-connection-per-server=16 min-split-size=1M split=16 可以看到有一项 其实还没有设具体的值：rpc-secret,这是链接aria2服务时需要的token值，把它改成你想要的设置的值即可（随便设置）：例如：rpc-secret=123456 其他的选项可以先展示默认，以后想要改都可以来这里修改 ","date":"2019-02-13","objectID":"/omv-install-aria2/:1:0","tags":["OMV"],"title":"OMV配置Aria2","uri":"/omv-install-aria2/"},{"categories":["折腾"],"content":"Web管理界面安装 OMV提供了一个操作界面管理docker镜像，也可以在这里创建拉取运行docker镜像 切换到服务 ---\u003e docker(容器)： 如果你刚才使用命令行安装了aria2，那么现在你也可以在把这里看见他的身影了。 在这里我们也能看到这个容器是在运行的 想要使用Web界面安装aria2，先要搜索到镜像，进行拉取镜像，找到镜像后点击它 什么也不需要动，直接点击开始，就会开始拉取镜像了… 输出那里会显示拉取状态，拉取完成后点击关闭 可以看到我们刚刚拉取完成的镜像已经在镜像列表中了 部署运行镜像 选中我们刚刚拉取的镜像，并点击部署镜像 将会弹出一个配置窗口，这个窗口其实就是我们上面命令行的各种 -*的配置！ 下面我们按照容器要配置的进行配置，那我怎么知道容器要配置些什么呢？可以去docker-hub上查看该容器需要配置的项目，例如现在的这个容器：可以去这里查看 配置完成后，点击保存即可，之后容器会运行起来，直接可以在容器那里查看运行状态 ","date":"2019-02-13","objectID":"/omv-install-aria2/:2:0","tags":["OMV"],"title":"OMV配置Aria2","uri":"/omv-install-aria2/"},{"categories":["折腾"],"content":"连接管理界面 这个容器是不带GUI界面的，只有一个守护进程在，我们可以使用网上提供的GUI界面连接我们的aria2后台进程 我这里使用的是这个：http://binux.github.io/yaaw/demo/ 你也可以找一个别的 打开上面的连接，吧我们的aria2连接上，点击扳手的位置： aria2的连接连接是：http://IP:6800/jsonrpc 刚才我们还配置了一个token密码，所以我们的连接地址应该写成： http://token:123456@192.168.50.118:6800/jsonrpc token: 后面带的就是你刚才设置的rpc-secret=123456的值 之后点击保存,之后如果连接上了，界面右上角就会出现aria2的版本和下载速度标识 ","date":"2019-02-13","objectID":"/omv-install-aria2/:3:0","tags":["OMV"],"title":"OMV配置Aria2","uri":"/omv-install-aria2/"},{"categories":["折腾"],"content":"百度下载 aria2可以下载百度盘的资源，需要使用一个插件进行转链 地址：https://github.com/acgotaku/BaiduExporter 克隆下来 git clone https://github.com/acgotaku/BaiduExporter.git 然后使用chrome安装上去： 选择你刚才下载插件的地址 即可看到插件安装完成： 现在随便去找一个百度的下载，就能看见左侧有一个导出下载 设置我们的aria2进程： 把我们刚才连接GUI界面的连接填写上去 http://token:123456@192.168.50.118:6800/jsonrpc 之后鼠标再次悬浮到导出下载，点击选中我们刚刚配置的aria2服务：我的名字改成了OMV， 之后即可弹出下面的提示 之后任务已经在下载了，可以去http://binux.github.io/yaaw/demo/查看你的任务进度 ","date":"2019-02-13","objectID":"/omv-install-aria2/:4:0","tags":["OMV"],"title":"OMV配置Aria2","uri":"/omv-install-aria2/"},{"categories":["折腾"],"content":"OMV共享文件夹/SMB设置 ","date":"2019-02-12","objectID":"/omv-config-smb/:0:0","tags":["OMV"],"title":"OMV共享文件夹/SMB设置","uri":"/omv-config-smb/"},{"categories":["折腾"],"content":"挂载硬盘 去看看你的硬盘挂载了没 存储器 —\u003e 文件系统 我这里有两个盘没有挂载，选中它挂载 全部挂载后 数据盘挂载位置 OMV的系统盘和数据盘是分离的，有时候你安装的应用的配置文件夹，就需要保存在你的数据盘内 OMV的数据盘磁盘地址一般映射在 /srv下面 具体的硬盘信息可以查看 文件系统查看 比如我的硬盘 在我的/srv下的地址是： ","date":"2019-02-12","objectID":"/omv-config-smb/:1:0","tags":["OMV"],"title":"OMV共享文件夹/SMB设置","uri":"/omv-config-smb/"},{"categories":["折腾"],"content":"磁盘保护 开启磁盘保护，为你所有的磁盘都做这个设置，不用的时候能够休眠一段时间，能一定程度上增加磁盘寿命。 存储器 —\u003e 磁盘 ","date":"2019-02-12","objectID":"/omv-config-smb/:2:0","tags":["OMV"],"title":"OMV共享文件夹/SMB设置","uri":"/omv-config-smb/"},{"categories":["折腾"],"content":"S.MART 开启磁盘监控，查看磁盘的健康状态，不过OMV的监测好像有问题，我刚买的酷狼盘，被它一扫出了好多老化磁道，放到DG上扫描有事全绿的，没理由这么快就有问题的，可能这个功能没什么卵用而且还不准，不过还是开启吧 存储器 —\u003e S.MART 全部亮绿灯即可 ","date":"2019-02-12","objectID":"/omv-config-smb/:3:0","tags":["OMV"],"title":"OMV共享文件夹/SMB设置","uri":"/omv-config-smb/"},{"categories":["折腾"],"content":"开启共享文件夹 访问权限管理 —-\u003e共享文件夹 点击添加增加共享文件夹 名称可以随便填写，设备选择你要共享的硬盘，路径就是你要共享的硬盘上的文件夹了 保存之后，应用一下配置更新即可 如果有多个文件夹共享，只需要继续添加即可，步骤都是一样的。 ","date":"2019-02-12","objectID":"/omv-config-smb/:4:0","tags":["OMV"],"title":"OMV共享文件夹/SMB设置","uri":"/omv-config-smb/"},{"categories":["折腾"],"content":"SMB 开启SMB设置 服务 —\u003e SMB/CIFS 首先先启动服务： 然后切换到共享，选择添加 设置要配置的文件夹，这些文件夹都是在共享文件夹那里配置过的。之后点击保存即可 ","date":"2019-02-12","objectID":"/omv-config-smb/:5:0","tags":["OMV"],"title":"OMV共享文件夹/SMB设置","uri":"/omv-config-smb/"},{"categories":["折腾"],"content":" OMV5已经推出，原生支持UEFI启动。可以尝试直接使用官方ISO安装了。 点我前往镜像下载地址 ​ 家里有些硬件留着不使用有些可惜，放着也是放着，不如发挥一点作用,差块主板就是PC，所以就买了块主板，也借此机会学习一下如何组建nas，在nas系统上的选择，最后选择了开源的OMV，OMV基于Debian开发，我的主板只支持UEFI启动，OMV4版本目前不能直接UEFI引导，所以需要使用到Debian，这里做个记录，查看最小安装Debian ","date":"2019-02-11","objectID":"/install-omv4/:0:0","tags":["OMV"],"title":"Debian9安装OMV4","uri":"/install-omv4/"},{"categories":["折腾"],"content":"软件版本 Debian9 omv4 ","date":"2019-02-11","objectID":"/install-omv4/:1:0","tags":["OMV"],"title":"Debian9安装OMV4","uri":"/install-omv4/"},{"categories":["折腾"],"content":"安装前操作 Debian上安装OMV，需要提前解决一些依赖问题 Install Realtek Firmware 不先安装的话之后安装OMV会报下面的错： Possible missing firmware /lib/firmware/rtl_nic/rtl8168d-1.fw for module r8169 添加下面内容： # 增加仓库 vim /etc/apt/sources.list # 在显示界面 按下字母 i 进入插入模式 复制下面的字符串添加到 sources.list 的最后一行 # 之后 输入 :wq! 保存退出 deb http://httpredir.debian.org/debian/ stretch main contrib non-free 之后还是在命令行操作： # 更新 sudo apt update # 这一步 安装 Realtek Firmware sudo apt-get install firmware-realtek sudo apt update # 安装其他内核 apt-get install firmware-linux firmware-linux-free firmware-linux-nonfree ","date":"2019-02-11","objectID":"/install-omv4/:2:0","tags":["OMV"],"title":"Debian9安装OMV4","uri":"/install-omv4/"},{"categories":["折腾"],"content":"安装OMV 添加包存储库 复制下面命令到命令行回车执行 cat \u003c\u003cEOF \u003e\u003e /etc/apt/sources.list.d/openmediavault.list deb http://packages.openmediavault.org/public arrakis main # deb http://downloads.sourceforge.net/project/openmediavault/packages arrakis main ## Uncomment the following line to add software from the proposed repository. # deb http://packages.openmediavault.org/public arrakis-proposed main # deb http://downloads.sourceforge.net/project/openmediavault/packages arrakis-proposed main ## This software is not part of OpenMediaVault, but is offered by third-party ## developers as a service to OpenMediaVault users. # deb http://packages.openmediavault.org/public arrakis partner # deb http://downloads.sourceforge.net/project/openmediavault/packages arrakis partner EOF 安装openmediavault 4（Arrakis）软件包 这块也是一样 复制下面命令到命令行回车执行 # 准备工作 export LANG=C export DEBIAN_FRONTEND=noninteractive export APT_LISTCHANGES_FRONTEND=none apt-get update apt-get --allow-unauthenticated install openmediavault-keyring apt-get update # 下面是正式安装 apt-get --yes --auto-remove --show-upgraded \\ --allow-downgrades --allow-change-held-packages \\ --no-install-recommends \\ --option Dpkg::Options::=\"--force-confdef\" \\ --option DPkg::Options::=\"--force-confold\" \\ install postfix openmediavault 命令行安装会一直在刷安装日志，等待日志刷完，会跳出如下安装成功界面，这个时候表示安装完毕，选择确定之后回车，再按照要求初始化OMV即可。 初始化omv 这一步骤就相当简单了，只需要一条命令 omv-initsystem 等待初始化完成后，OMV已经启动完成，之后便可以在浏览器中访问你的刚刚安装的OMV了。 修改服务端口 OMV的默认端口的80，但是一般还是不要使用80端口 命令行输入： omv-firstaid # 这是OMV的命令行界面配置面板 我们选择第二项(configure web control panel)修改Web的访问端口，当然这一个操作是可以在Web界面修改的 按确认后即可成功修改。 Updating web control panel settings. Please wait ... The web control panel settings were successfully changed. The web control panel is reachable via URL: enp3s0: http://192.168.50.118:9529 enp3s0: http://fe80::7285:c2ff:feaf:f988%enp3s0:9529 root@omv:/home/qinkangdeid# 验证端口是否修改成功 curl http://127.0.0.1:9529 ## 如果返回一个html即表示已经成功 # 或Telnet telnet 127.0.0.1 9529 ## 出现下面即可表示端口监听成功 qinkangdeid@omv:~$ telnet 127.0.0.1 9529 Trying 127.0.0.1... Connected to 127.0.0.1. Escape character is '^]'. ","date":"2019-02-11","objectID":"/install-omv4/:3:0","tags":["OMV"],"title":"Debian9安装OMV4","uri":"/install-omv4/"},{"categories":["折腾"],"content":"登录OMV 如上设置后，OMV便可以访问了，OMV的访问地址是http://YOUR_IP:YOUR_PORT 如果你没有修改OMV的访问端口的话，那么直需要在你的浏览器上打上你的OMV机器所在的内网IP即可 如果你修改了访问端口，就需要在后面加上端口， 例如我的修改成了9529 我的访问地址则是：http://192.168.1.118:9529 ，OMV的登录界面如下： 如果你现在还不知道你的OMV所在机器的内网IP，可以使用 ifocnfig 命令查看（需要事先安装net-tools） OMV初次使用的默认密码是以下，前面最后的安装提示也有显示的: admin openmediavault 进入后的界面大致如下： 进去第一件事当然是修改默认的密码 系统 —\u003e 常规设置 —\u003e web管理员密码 填入你的新密码，之后注销使用你修改后的用户密码重新登录。 ","date":"2019-02-11","objectID":"/install-omv4/:3:1","tags":["OMV"],"title":"Debian9安装OMV4","uri":"/install-omv4/"},{"categories":["折腾"],"content":"安装后 ","date":"2019-02-11","objectID":"/install-omv4/:4:0","tags":["OMV"],"title":"Debian9安装OMV4","uri":"/install-omv4/"},{"categories":["折腾"],"content":"更新 安装后设置密码后的第一件事件就是先去检查更新， 系统 —\u003e 更新管理 —\u003e 检查更新 如果有更新，软件包信息下面就会显示一长串软件信息，之后点击升级按钮即可 如果没有，软件包信息下面会什么都没有，例如我现在的是最新，目前还没有任何资源需要更新 ","date":"2019-02-11","objectID":"/install-omv4/:4:1","tags":["OMV"],"title":"Debian9安装OMV4","uri":"/install-omv4/"},{"categories":["折腾"],"content":"设置非root用户连接ssh(可选操作) 最好不要使用root做太多设置，如果sudoer能做的事情，就让sudoer做，现在为我们的Debian用户添加进ssh组，允许使用改用户进行ssh连接 访问权限管理 —\u003e 用户 选择编辑切到用户组找到ssh组并且打上勾，之后保存，之后即可使用该用户进行ssh连接 ","date":"2019-02-11","objectID":"/install-omv4/:4:2","tags":["OMV"],"title":"Debian9安装OMV4","uri":"/install-omv4/"},{"categories":["折腾"],"content":"omv-extras 是omv的第三方扩展插件库，里面有很多的第三方插件可以使用。点击这里下载插件安装包，选择你对应的OMV版本,我这里的OMV版本的OMV4。 来到 系统 —\u003e 插件一栏 ","date":"2019-02-10","objectID":"/install-omv-extras/:0:0","tags":["OMV"],"title":"OMV安装omv-extras","uri":"/install-omv-extras/"},{"categories":["折腾"],"content":"方法一：GUI安装 点击上传 上传刚才下载的安装包，之后点是 之后点击检查更新，之后会在最后面能找到刚才的安装包插件，在左侧的单选框打上勾，然后点击安装 弹出安装插件中的弹框，等待安装成功 关闭按钮变为可点击时说明安装成功，装完之后记得去更新管理查看是否有需要更新的组件，不然会有莫名其妙的情况出现 ","date":"2019-02-10","objectID":"/install-omv-extras/:1:0","tags":["OMV"],"title":"OMV安装omv-extras","uri":"/install-omv-extras/"},{"categories":["折腾"],"content":"方法二：命令行安装 直接命令行一键安装即可 # 下载安装包 wget -O - https://github.com/OpenMediaVault-Plugin-Developers/packages/raw/master/install | bash 安装完成在左侧菜单树才可看见 ","date":"2019-02-10","objectID":"/install-omv-extras/:2:0","tags":["OMV"],"title":"OMV安装omv-extras","uri":"/install-omv-extras/"},{"categories":["折腾"],"content":"开启插件库 系统 —\u003e OMV-Extras 点选一个插件，例如dockerCE 之后点击启用，保存即可 稍等片刻，安装完成，即可看见已启动一栏变绿 ","date":"2019-02-10","objectID":"/install-omv-extras/:3:0","tags":["OMV"],"title":"OMV安装omv-extras","uri":"/install-omv-extras/"},{"categories":["折腾"],"content":"OMV安装 flashmemory 我的OMV是装在了U盘上的，该插件可以将系统运行产生的临时文件存进内存，降低磁盘的读写次数，从而达到延长系统盘的使用寿命。 flashmemory属于omv拓展(omv-extras)插件，如果没有安装拓展包是搜索不到的 如果你还没有安装omv-extras的话，请先安装OMV安装omv-extras 之后会在下面找到相关标签： 存储器 —\u003e flashmemory 这里有一个可选的操作， 当然，可以跟着步骤去修改一下，如下： 之后wq!保存退出，重启机器即可 ","date":"2019-02-10","objectID":"/omv-install-flashmemory/:0:0","tags":["OMV"],"title":"OMV安装 flashmemory","uri":"/omv-install-flashmemory/"},{"categories":["折腾"],"content":"[TOC] 参考链接：https://www.pcsuggest.com/debian-minimal-install-guide/ ","date":"2019-02-10","objectID":"/install-debian9/:0:0","tags":["OMV"],"title":"安装Debian9","uri":"/install-debian9/"},{"categories":["折腾"],"content":"我的硬件 主板：华擎J4105-ITX(只支持UEFI) 内存：8G 系统盘：32G 闪迪酷豆U盘 数据盘：2t希捷酷狼 ","date":"2019-02-10","objectID":"/install-debian9/:1:0","tags":["OMV"],"title":"安装Debian9","uri":"/install-debian9/"},{"categories":["折腾"],"content":"前期准备 debian镜像 一个8G以上U盘用于烧录启动U盘 安装系统盘（可以是任何闪存介质：U盘、HDD、SSD） ","date":"2019-02-10","objectID":"/install-debian9/:2:0","tags":["OMV"],"title":"安装Debian9","uri":"/install-debian9/"},{"categories":["折腾"],"content":"烧录启动U盘 安装前需要制作启动U盘，现在Debian的版本是9.8：下载点我 安装包在最下面:debian-9.8.0-amd64-netinst.iso 烧录软件我使用Etcher进行操作，以前一直使用refus,觉得已经很简单了，自从找到了Etcher,才发现还有更简单的，而且长得也很漂亮，那果断换它了。点击这里下载 基本只需要点三次就可以完成： 选取烧录镜像 选择要烧录的U盘 点击烧录 之后看到烧录进度条 烧录成功，就是这么简单！ ","date":"2019-02-10","objectID":"/install-debian9/:3:0","tags":["OMV"],"title":"安装Debian9","uri":"/install-debian9/"},{"categories":["折腾"],"content":"安装Debian 将烧录好的U盘插到你的机器USB上，开机启动的时候选择U盘启动，之后就可以看到安装向导界面了 选择图形安装 选择开机语言 提示所选的语言可能不能完全显示，继续选择是 选择母语区域 配置键盘，这里选择美国或者汉语都是可以的，键位都一样 等待加载额外组件后，配置网络，主机名可以随意填写，我这里就填写omv 网络域名配置，没什么特殊要求的就先不填写了，后面都可以修改 设置root用户密码 增加普通用户，名字当然是可以随选取的，看你的意愿了 设置上面用户的密码 如果机器是UEFI启动的，就会出现下面的提示，我的主板只支持UEFI启动，并且我只会在这一块硬盘上安装一个系统，所以可以选择强制使用UEFI安装，如果你一块硬盘已有系统，可以选择否，引导以后也可以修改，强制使用UEFI安装保证你这次安装下次开机可以引导到Debian。 磁盘分区,这里我选择使用整个磁盘并且配置LVM 选择你想安装Debian的硬盘盘位 磁盘分区，还是按照向导所说，选择所有文件在同一个分区 将分区写入磁盘 依然是磁盘分区设置，按照如下选择，你不选是，你就到不了下一步啊，哈哈~ 磁盘分区结束，下面是列出你的分区配置，不满意的还可以往前重新调，如果可以了，就写入磁盘，如下： 最后再次确认一下分区配置，可以选择是 之后便是安装基本系统的进度条在跑了，稍等片刻……. 安装基本系统完毕后，需要选择包管理镜像地址，选祖国： 选择镜像地址 包管理代理配置 留空，以后有需要可以在配置 收集用户信息弹框，如果不介意的话，选择是 软件选择了最小安装，那就小到极致点吧，以后想要什么就再加。 PS: 如果要装OMV,最后这一步不要装图形。 这里的安装进度会持续比较长的时间…取决于你的配置和你的网络速度，静下心来喝杯茶等待……. 出现下面的画面，已经大功告成了！，选择继续，机器将重启，这个时候拔出你的启动U盘，之后进入安装好的Debian系统，至此Debian的最小安装就算完了。 ","date":"2019-02-10","objectID":"/install-debian9/:4:0","tags":["OMV"],"title":"安装Debian9","uri":"/install-debian9/"},{"categories":["折腾"],"content":"安装完后的操作 系统安装完成后，会启动到命令行界面，因为我们刚才就是最小安装的，是没有安装图形界面的，这个时候使用你刚才创建的用户名或者你的root用户，输入你的密码，进入到系统中，下面就可以为所欲为了。 # 切换到root用户 su - # 第一步还是先更新 apt-get update # 安装网络工具包 net-tools ifconfig命令需要 apt-get install net-tools # vim apt-get install vim # curl apt-get install curl # 安装sudo apt-get install sudo # 替换你的用户名 user_name usermod -aG sudo user_name ","date":"2019-02-10","objectID":"/install-debian9/:5:0","tags":["OMV"],"title":"安装Debian9","uri":"/install-debian9/"},{"categories":["折腾"],"content":"查看你机器的IP 在安装 net-tools依赖之后，你可以查看你的机器IP是多少 命令行填写 ifconfig 即可查看 ","date":"2019-02-10","objectID":"/install-debian9/:6:0","tags":["OMV"],"title":"安装Debian9","uri":"/install-debian9/"},{"categories":["折腾"],"content":"黑苹果的定义和说明网上已经有详细的讲解了，随便搜索一下\"黑苹果”，就能出现很多文章描述，找到了下面一句总结性的话语： “黑苹果 (Hackintosh)” —— 一台运行着 Mac OS 操作系统的 PC 硬件。 软件运行在硬件之上，所以一个软件的开发适配，都是在指定的硬件条件下进行的。苹果的产品大都有自己特殊的硬件要求。在苹果选择了x86之后，才有了黑苹果的可能。不过现在AMD的CPU也可以黑了，那个就更耗费精力了。 黑苹果之所以复杂繁琐，就是因为PC机的硬件本身太多太复杂，不像白苹果，一共就那么几种硬件，两手两脚基本就数得清。但是也正因为PC硬件丰富，你就有希望找到兼容MacOS的硬件，笔记本一般硬件都焊死，所以笔记本一般都比较的麻烦。 黑苹果所说的免驱，一般是完美兼容MacOS的硬件，MacOS内置的驱动就可以驱动它完美运行，而不需要你增加额外的第三方驱动去驱动它，并不是不需要驱动。 ","date":"2018-05-10","objectID":"/install/:0:0","tags":["hackintosh"],"title":"黑苹果安装记录","uri":"/install/"},{"categories":["折腾"],"content":"EFI 配置 想要在不是苹果官方生产的硬件上运行MacOS，那就需要让 MacOS “认为\"你现有的硬件是\"合格\"运行MacOS的硬件。 系统启动都有一个引导自检的过程，像Android的bootloader一样，PC也有，以前有BIOS启动，现在是UEFI启动(Unified Extensible Firmware Interface),UEFI是一种详细描述类型接口的标准。这种接口用于操作系统自动从预启动的操作环境，加载到一种操作系统上。 黑苹果就是在这个阶段去做一些\"手脚\"的，最重要的就是整理这一部分的EFI引导文件。 这个EFI文件是重中之重，会直接影响到你是否可以安装MacOS系统，请查找或配置符合你硬件的EFI文件，这里不会涉及EFI文件的相关概念和如何配置适用于黑苹果的EFI文件，你可能得移步到远景或者tonyx86等论坛进行学习或查找。 假如你的主板用的和我的是一样的，那么你可以尝试直接使用我的EFI文件进行安装，如果你还没有找到符合你硬件的EFI文件，还是先去网上找找或自己学习配置。 如果你是新手，对黑苹果的概念还不熟悉，又想安装体验MacOS系统，强烈建议你站在前人的肩膀上，在网上查找和你硬件差不多的先驱者们分享的EFI直接使用，路漫漫夕其修远，黑苹果是一个需要折腾的过程，等你安装上并且使用后，再慢慢了解其中因果是最为便捷的方式。 ","date":"2018-05-10","objectID":"/install/:1:0","tags":["hackintosh"],"title":"黑苹果安装记录","uri":"/install/"},{"categories":["折腾"],"content":"安装 ### 制作U盘启动器 其实EFI文件你搞定了，安装黑苹果将和安装Windows、Linux没什么差别了，或者说和安装白苹果一样了。和Windows、Linux系统的安装步骤一样，你需要制造一个U盘启动器，查看这里制作你的U盘启动器。 ","date":"2018-05-10","objectID":"/install/:2:0","tags":["hackintosh"],"title":"黑苹果安装记录","uri":"/install/"},{"categories":["折腾"],"content":"安装MacOS系统 到这一步，假设你已经做好了U盘启动器了。现在万事俱备，只差实施了。 选择U盘启动 将你制作好的U盘启动器插入到你将要安装系统的机器的USB口上，将机器开机，查找你主板的Boot Menu快捷键（一般都是F11或者F12，技嘉主板的是按F12），进入到启动选择界面，找到你的U盘启动器的名字，选择它的UEFI启动，例如我的U盘的名字是SanDisk，则我就选择UEFI那个分区启动，如果你的U盘品牌不一样，请找到你的U盘并且对号入座选择正确的启动项： Clover引导界面选择安装 上面选择之后，就进入到了Clover的引导界面，如果你的系统盘够干净，那么应该只会剩下一个安装的选项，所以现在小孩和大人都不用做选择了，直接按回车键 回车之后会进入loading界面，这一步骤就是等待他加载完成出现安装向导界面了。如下： 加载完成之后，来到安装向导界面，在这里选择语言，根据你的国家环境选择，祖国当然是简体中文啦： 之后会来到macOS实用工具界面，我们需要将系统盘进行抹掉操作，所以要选择磁盘工具，进行抹盘，就是要格式化的意思，所以如果你将要安装的系统盘之前有什么重要的数据，那么事先就要先做好备份了。 之后进项抹盘操作，选择系统盘，然后点击抹掉 弹出抹盘的选项，系统盘符名称可以随便填写，我这填MacOS抹盘格式选择MacOS拓展（日志式），之后点击抹掉按钮 抹盘成功提示： 回到macOS实用工具界面，选择安装macOS 下面正式出现安装向导界面了 点击继续，你不点也不行，因为它就只有那么一个按钮 😂 之后是许可协议，这回有两个按钮了😀，但是你要想继续下去，也只能选择同意 😏 下面这里要选择系统安装位置了，选择刚才抹掉的系统盘，然后继续点击安装 之后会出现安装进度条，在这个阶段机器会重启若干次，所以你要仔细盯着屏幕了，等机器重启的时候你要像之前那样，手动选择以U盘启动器方式启动，不然进不到下面的步骤，谨记，如果你晃了神，没能及时选择U盘启动，那么重新关机，再开机选择一次，安装进度也能继续进行。 当你的机器再次重启的时候，在Clover的引导界面会多出一个选项，这个选项就是我们刚才安装的系统盘，这一次选择启动到我们的系统盘 选中回车之后，又是一个loading界面 继续之前的安装工作 这个步骤可能还是会有重启，所以和之前上面的操作一样，手动选择U盘启动器，clover引导界面选择启动到我们的系统盘，大概十几分钟后安装完毕会提示下面即将要重启的提示，记住，只要重启，你就要手动选择U盘启动，现在的引导文件只在我们的U盘启动器里面，还没有在我们的系统盘里面，所以要引导系统，就需要选择U盘引导启动。 重启之后再一次来到clover引导界面，这一回，又多了几个启动项了，最左边就是我们的重装启动项了（就是之前我们第一次引导出现的那个） 第二个和第三个是都是预启动的启动项 我们不选它们，只选择启动到我们的系统盘 这一回来到的就是设置向导界面了，一个大大的welcome，这里选择的是国家，我们选择China 选择键盘布局，可以自由选择，后面进了系统还可以选，我这里只选ABC了，之后点击Continue 数据隐私协议，点击Continue 是否要转移旧数据到这台新机器上，这里选择不转移，继续点击Continue 登录AppleID，这里先不要登录，不然这里会联网，会花费时间，选择Set Up Later,继续点击Continue,它会再次提醒你真的要跳过吗？当然是…..Skip啊 之后又是条款之类的啦 一直 Agree 之后来到创建用户阶段，其他的都好说，Hint的输入框是当你锁屏输入密码错误的时候会给与的提示字符，按你喜欢的设置就可以了，设置完后继续点击Continue 来到系统特性说明啦，出现这个那么感觉是不是快可以结束了?，应该是的，依然Continue，安装系统就是百般顺从的过程 嚯~ 选择皮肤了~那应该快了，这个时候需要问一下你的眼睛喜欢哪一种色调了，然后点击它，还是Continue 谢天谢地，出现了这个界面，神功即将练成。 终于~ 终于等到你~进入桌面了，这个时候首先跳出来的就是来识别一下你的键盘键位Mac到底识别的对不对，跟着它的提示，找你的shift按钮按下去吧。 桌面呈现在你的眼前 祝贺你，神功已练成了~（这张图是我网上随便找的，我的桌面太乱就不截图了😂） ","date":"2018-05-10","objectID":"/install/:2:1","tags":["hackintosh"],"title":"黑苹果安装记录","uri":"/install/"},{"categories":["折腾"],"content":"复制EFI引导到系统盘 神功虽练成，但是你还是需要使用外部的U盘来进行引导系统的启动，所以下面，你需要将引导文件装载到你系统盘的EFI分区，到了这一步我已经明确知道你已经拥有MacOS环境了，那么就使用Clover Configurator软件挂载吧，这个步骤和制作U盘启动器时候把EFI文件复制进U盘里的步骤是一样样的，只不过这一次你是要把EFI文件复制到你已经安装好的系统盘的EFI分区里而已。为了你不用回去看步骤，我还是复制以前的放这里吧，连贯一些 软件下载可以去这里下载,不是 Mac App Store下载的软件，MacOS会启用了新的安全机制检查不让运行，命令行执行sudo spctl --master-disable命令即可运行。 打开了Clover Configurator软件后，切到Mount EFI标签，这里会显示两个EFI分区，分别给两个分区都挂载到系统上，点击Mount Partition输入用户密码挂载EFI分区。 这个时候分别打开系统盘的EFI和U盘的EFI分区，将U盘EFI分区里的EFI文件夹整个复制到系统盘的EFI分区里就搞定了！这回神功就附体了！ PS: 如果你现在选择不复制EFI文件也是可以的，在PE这里也是可以复制EFI文件的，方法也就是挂载两个EFI分区，复制文件就行了 不过如果你的硬盘不被你的主板认为第一启动盘的时候，你需要将你的系统盘设置为第一启动盘，这里我们可以使用PE系统，将clover引导作为第一启动项，如果你不知道你的主板是不是已经将你的系统盘作为第一启动盘了，那么就跟着照做吧 启动到你的PE系统里(如何U盘启动前面已经说了)，运行DiskGenius，去看你的系统盘的EFI分区在PE里的盘符是多少，可以看到我的系统盘的EFI分区盘符是D 打开盘符D,可以看到我们的EFI文件夹。这里开始使用PE上的一个引导工具将Clover引导作为第一启动项，BOOTICE软件没有哪个PE没有自带吧？ 点击添加，然后选到系统的EFI分区盘符选择并且选择EFI文件夹里面的CLOVERX64.efi文件，在我这里我的盘符就是D 之后在软件界面最下面会看到一条新建的引导项 给他起个名字叫Clover然后点击保存设置，然后点击最左边的上移，将这条新的名字叫Clover的引导排在第一位，就像下面这样 这回真的可以大功告成了！所有的步骤都完成了，拔出你的PE U盘 重新启动你的机器吧，这个时候它就会乖乖的启动到Clover引导界面，然后进入你的MacOS系统了，接下来，折腾你的新系统吧~enjoy it !!! ","date":"2018-05-10","objectID":"/install/:2:2","tags":["hackintosh"],"title":"黑苹果安装记录","uri":"/install/"},{"categories":["折腾"],"content":"前言 如果你的主板和我的是一样的，那么你可以尝试直接使用这个EFI文件进行安装。 所有资源都来源于网络，这是我实践后的结果副本，感谢互联网上那些为黑苹果做出贡献的所有人，当然也要感谢Apple😄 这是一个折腾的过程，也许你会碰到我没有曾碰到过的问题，所以请做好心理准备，生命不息，折腾不止。 也希望同样配置的用户可以一起维护这个Repo 🙏 ","date":"2018-05-10","objectID":"/readme/:1:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"截图 ","date":"2018-05-10","objectID":"/readme/:2:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"目录一览 └── z370n-wifi-hackintosh ├── EFI ---- MacOS引导文件 ├── CHANGELOG.md ---- 更新日志 ├── README.md ---- README.md ","date":"2018-05-10","objectID":"/readme/:3:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"分支介绍 一般的 你只需要将EFI整个复制到你制作的启动U盘里的EFI分区即可,其他文件只是我的备份 10.15.x —\u003e catalina 10.14.x —\u003e mojave 10.13.x —\u003e high-sierra master —\u003e 是目前MacOS最新版本，例如现在最新版本是catalina，master分支会和 catalina保持一致 ","date":"2018-05-10","objectID":"/readme/:4:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"硬件配置 包含我所知的网友的配置 硬件 型号 主板 技嘉 z370n-wifi CPU i5-8400 / i5-8500 / i5-8600K / i7-8700k / i9-9900k CPU散热 猫头鹰 NH-L9i 机箱(带电源) 立人-H80 蓝牙wifi(可选) BCM94352Z(DW1560) / BCM94360CS2 内存 骇客神条16GB / 芝奇幻光戟 32G / 海盗船 32G SSD Samsung SM951 512GB / Samsung 960 EVO / 970 EVO / WD SN750 显卡 RX570蓝宝石 / Vega 56 nano ","date":"2018-05-10","objectID":"/readme/:5:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"不兼容硬件 三星PM981 ","date":"2018-05-10","objectID":"/readme/:6:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"更新日志 查看更新日志 ","date":"2018-05-10","objectID":"/readme/:7:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"硬件工作情况 网卡 蓝牙 wifi 核显 音频 USB 睡眠 ","date":"2018-05-10","objectID":"/readme/:8:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"未解决问题 核显带动双4K显示器睡眠唤醒HDMI接口会闪烁 目前解决办法(二选一)：1. 重新插拔接口 2.关闭显示器电源再打开 ","date":"2018-05-10","objectID":"/readme/:9:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"系统安装 安装前设置BIOS 查看安装方法 ","date":"2018-05-10","objectID":"/readme/:10:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"如何更新 复制最新的EFI文件到EFI分区 像白果一样去软件更新安装更新补丁即可 检测更新 ","date":"2018-05-10","objectID":"/readme/:11:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"BIOS设置 目前我的BIOS版本：F10 还原BIOS配置： Save \u0026 Exit → Load Optimized Defaults 方法一：BIOS手动配置 BIOS \u003e CSM Support \u003e Disabled BIOS \u003e Windows 8/10 Features \u003e Windows 8/10 BIOS \u003e Secure Boot \u003e Disabled Peripherals \u003e Intel Platform Trust Technology (PTT) \u003e Disabled Peripherals \u003e USB Configuration \u003e Legacy USB Support \u003e Enabled Peripherals \u003e Network Stack Configuration \u003e Network Stack \u003e Disabled Peripherals \u003e USB Configuration \u003e XHCI Hand-off \u003e Enabled Chipset \u003e DVMT Pre-Alloc \u003e 128M Chipset \u003e DVMT Total Gfx Mem \u003e 256M Chipset \u003e Vt-d \u003e Disabled Chipset \u003e Above 4G Decoding \u003e Enabled 显卡部分 根据你有无独立显卡设置 核显调整 Peripherals → Initial Display Output : IGFX Chipset → Integrated Graphics : Enabled Chipset → DVMT Pre-Allocated :128M 外置显卡调整 Peripherals → Initial Display Output : PCIe 1 Slot Chipset → Integrated Graphics : Disabled 选做部分 如果你的内存条频率过了2666 可以提高频率 M.I.T \u003e Extreme Memory Profile (X.M.P.) \u003e Profile 1 方法二：导入BIOS配置文件 我提供了已经配置好的BISO设置文件，你可以选择导入我配置的BIOS文件 PS: 一定要对应BIOS版本 我的版本只是用核显没有独立显卡 开机狂按Del进入BIOS界面 切换到Save\u0026Exit 选择 Load Profiles，在弹出的对话框内选择对应的BIOS文件 出现Profile Loaded窗口后，点击Save\u0026Exit Setup退出BIOS重启 ","date":"2018-05-10","objectID":"/readme/:12:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"驱动详情 网卡 左侧网口 IntelMausiEthernet.kext 右侧网口 SmallTree-Intel-211-AT-PCIe-GBE.kext 蓝牙/WIFI 默认的主板上的蓝牙/WIFI网卡不能用于黑苹果。你需要更换为兼容的网卡，有两块网卡能够兼容黑苹果： 原装网卡(BCM94360CS2) 此款网卡原生驱动 不需要添加第三方驱动 DW1560(BCM94352Z) 这块网卡需要添加相应驱动，可以尝试直接使用Kexts for Dw1560文件夹里的驱动复制到EFI/CLOVER/kexts/Other/ 如果还不行请参考黑果小兵版主的教程设置 USB定制 EFI里默认的使用方式是Hackintool软件制作, 如果你要自定义更加符合你机箱上的USB端口排列，任选下面其中一个方法即可，你只需要根据自己需要增删相应端口即可,Z370N-WIFI所有的USB端口已经全部标记出来了 点我查看 要确保USB总共的USB端口在15个以内(含)，一个USB3.0就占用两个端口，用 3.0 的需求应该比 2.0\u0010 的多点吧 所以结合你自己的实际需要 你可以屏蔽USB3.0上的2.0\u0010 端口以获取更多可用的USB3.0端口 USB两种方法 Hackintool定制 将生成的两个文件复制到指定位置 SSDT-EC.aml 复制到 EFI/CLOVER/ACPI/patched USBPorts.kext复制到EFI/CLOVER/kexts/Other 这种方式比较容易定制符合自己机箱的端口 SSDT定制 将SSDT文件夹里的复制到指定位置 SSDT-UIAC.aml 复制到 EFI/CLOVER/ACPI/patched USBInjectAll.kext复制到EFI/CLOVER/kexts/Other 本质上两者应该没啥区别 只是定制的难易程度 以下是我目前定制的USB端口 Z370N-WIFI主板USB端口位置 ","date":"2018-05-10","objectID":"/readme/:13:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"常用软件 macOS Patcher镜像下载 U盘启动install-disk-creator Clover Configurator kextupdater Kext Utility ","date":"2018-05-10","objectID":"/readme/:14:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"后续问题解决途径 Google is your good friend 黑果小兵博客 远景论坛 insanelymac tonymacx86 ","date":"2018-05-10","objectID":"/readme/:15:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI","uri":"/readme/"},{"categories":["折腾"],"content":"更新日志 ","date":"2018-05-10","objectID":"/changelog/:0:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2020-03-05 macOS | Version: 10.15.3 Clover Version update to: r5041 kexts update AppleALC 1.4.7 IntelMausi 1.0.2 Lilu 1.4.2 SmallTreeIntel82576 1.0.6 USBInjectAll 0.7.3 VirtualSMC 1.1.1 WhateverGreen 1.3.7 ","date":"2018-05-10","objectID":"/changelog/:1:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-12-12 macOS | Version: 10.15.2 Clover Version update to: r5099 Lilu | Version: 1.4.0 AppleALC | Version: 1.4.4 WhateverGreen | Version: 1.3.5 ","date":"2018-05-10","objectID":"/changelog/:2:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-11-02 macOS | Version: 10.15.1 AppleALC | Version: 1.4.3 WhateverGreen | Version: 1.3.4 VirtualSMC.kext | Version: 1.0.9 ","date":"2018-05-10","objectID":"/changelog/:3:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-10-09 macOS | Version: 10.15 AppleALC | Version: 1.4.2 WhateverGreen | Version: 1.3.3 VirtualSMC.kext 替换 FakeSMC.kext ","date":"2018-05-10","objectID":"/changelog/:4:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-07-06 Clover Version update to: r5070 AppleALC | Version: 1.4.1 WhateverGreen | Version: 1.3.2 Lilu | Version: 1.3.8 ","date":"2018-05-10","objectID":"/changelog/:5:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-07-06 Clover Version update to: r4972 AppleALC | Version: 1.3.9 WhateverGreen | Version: 1.3.0 Lilu | Version: 1.3.7 ","date":"2018-05-10","objectID":"/changelog/:6:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-06-22 Clover Version update to: r4961 ","date":"2018-05-10","objectID":"/changelog/:7:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-06-05 Clover Version update to: r4945 ","date":"2018-05-10","objectID":"/changelog/:8:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-05-24 Clover Version update to: 4934 AppleALC | Version: 1.3.8 WhateverGreen | Version: 1.2.9 Lilu | Version: 1.3.6 ","date":"2018-05-10","objectID":"/changelog/:9:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-04-16 Clover Version update to: 4920 更新了BIOS配置描述 建议看看 ","date":"2018-05-10","objectID":"/changelog/:10:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-04-15 AppleALC | Version: 1.3.7 WhateverGreen | Version: 1.2.8 ","date":"2018-05-10","objectID":"/changelog/:11:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-04-13 修改使用Hankintool定制USB端口 ","date":"2018-05-10","objectID":"/changelog/:12:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-04-08 macOS version update to: 10.14.4 Clover Version update to: r4910 ","date":"2018-05-10","objectID":"/changelog/:13:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-04-08 macOS version update to: 10.14.4 Clover Version update to: r4910 ","date":"2018-05-10","objectID":"/changelog/:14:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-03-22 AppleALC | Version: 1.3.6 Lilu | Version: 1.3.5 WhateverGreen | Version: 1.2.7 ","date":"2018-05-10","objectID":"/changelog/:15:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-03-05 Clover Version update to: 4895 ","date":"2018-05-10","objectID":"/changelog/:16:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2019-02-21 Lilu | Version: 1.3.4 AppleALC | Version: 1.3.5 ","date":"2018-05-10","objectID":"/changelog/:17:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2018-12-29 WhateverGreen.kext更新到 1.2.6 Lilu.kext更新到 1.3.0 ","date":"2018-05-10","objectID":"/changelog/:18:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2018-12-22 Clover升级到4813 AppleALC.kext更新到1.3.4 Lilu.kext更新到 1.2.9 WhateverGreen.kext更新到 1.2.5 ","date":"2018-05-10","objectID":"/changelog/:19:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2018-12-11 BIOS升级到F10 Clover升级到4798 系统版本更新到 10.14.2 创建USB-SSDT补丁 ","date":"2018-05-10","objectID":"/changelog/:20:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2018-10-07 BIOS升级到F5 Clover升级到4674 系统版本更新到 10.14.0 ","date":"2018-05-10","objectID":"/changelog/:21:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2018-07-12 Clover升级到4568 系统版本更新到 10.13.6 (17G65) apfs.efi相应升级到10.13.6 更新USB补丁 ","date":"2018-05-10","objectID":"/changelog/:22:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"2018-06-27 各功能正常版本….. ","date":"2018-05-10","objectID":"/changelog/:23:0","tags":["hackintosh"],"title":"技嘉在z370n-wifi黑苹果EFI更新日志","uri":"/changelog/"},{"categories":["折腾"],"content":"制作黑苹果U盘启动器 ","date":"2018-05-09","objectID":"/usb-installer/:1:0","tags":["hackintosh"],"title":"制作黑苹果U盘启动器","uri":"/usb-installer/"},{"categories":["折腾"],"content":"前期准备 8GB以上U盘(空盘、有数据的提前备份，制作时会格式化) Mac镜像(在Mac环境AppStore下载或网上找网友分享的镜像) 符合你PC配置的EFI引导文件 ","date":"2018-05-09","objectID":"/usb-installer/:2:0","tags":["hackintosh"],"title":"制作黑苹果U盘启动器","uri":"/usb-installer/"},{"categories":["折腾"],"content":"制作启动盘 ","date":"2018-05-09","objectID":"/usb-installer/:3:0","tags":["hackintosh"],"title":"制作黑苹果U盘启动器","uri":"/usb-installer/"},{"categories":["折腾"],"content":"方式一 App Store下载镜像制作 下载镜像 ​ 如果你已经有Mac环境了(实体机或者虚拟机)，直接去App Store搜索系统版本名称下载镜像，例如现在最新版本是Mojave之后会跳到设置中心的软件更新下载系统镜像 镜像很大，下载需要时间，下载完成后会在启动台里看到镜像 格式化U盘 镜像已经准备完毕，下面就是制作U盘启动了 将要用于制作启动盘的U盘插入USB上，打开 应用程序 → 实用工具 → 磁盘工具，将U盘抹掉(格式化) 成Mac OS X 扩展（日志式）格式、GUID 分区图，并将 U 盘命名为Mojave **注意 **：这里的盘符名称你可以随意指定，但是下一步制作U盘启动的时候选择的U盘名称要和这里设置的一样。 此时可以看到你的U盘名称变成了Mojave 你也可以去Volumes下面查看U盘名称 打开 应用程序→实用工具→终端(或者使用你喜欢的任何一个终端工具)，将下面的一段命令复制并粘贴进去： 如要制作 MacOS Mojave 启动盘，然后输入下面这段命令： 此命令需要输入管理员密码 sudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/Mojave /Applications/Install\\ macOS\\ Mojave.app --nointeraction 回车操作后，便已经在制作中了.耐心等待，这个时间持续比较久 完整的制作日志如下： ~ sudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/Mojave /Applications/Install\\ macOS\\ Mojave.app --nointeraction Password: Erasing disk: 0%... 10%... 20%... 30%... 100% Copying to disk: 0%... 10%... 20%... 30%... 40%... 50%... 60%... 70%... 80%... 90%... 100% Making disk bootable... Copying boot files... Install media now available at \"/Volumes/Install macOS Mojave\" 到这里U盘启动制作完毕。 ","date":"2018-05-09","objectID":"/usb-installer/:3:1","tags":["hackintosh"],"title":"制作黑苹果U盘启动器","uri":"/usb-installer/"},{"categories":["折腾"],"content":"方式二 下载网上资源镜像制作 ​ 如果你没有Mac环境，没办法从AppStore下载镜像的话或者你怕自己命令行制作有问题的话，也可以从网上查找网友大神们已经制作好的镜像制作，此步骤适用于Windows、Mac环境。 你可以到黑苹果乐园下载镜像，下载下来的是一个dmg结尾的文件,使用烧录软件烧录即可。 烧录软件我使用etcher 基本只需要点三次就可以完成： 选取烧录镜像 选择要烧录的U盘 点击烧录 之后看到烧录进度条 烧录成功，就是这么简单！ ","date":"2018-05-09","objectID":"/usb-installer/:3:2","tags":["hackintosh"],"title":"制作黑苹果U盘启动器","uri":"/usb-installer/"},{"categories":["折腾"],"content":"复制EFI引导文件 ​ 使用你喜欢的任何可以挂载EFI分区的方式，将EFI引导文件复制到U盘启动器的EFI分区内。 ","date":"2018-05-09","objectID":"/usb-installer/:4:0","tags":["hackintosh"],"title":"制作黑苹果U盘启动器","uri":"/usb-installer/"},{"categories":["折腾"],"content":"方式一 如果是在Mac环境下，我使用Clover Configurator软件挂载，毕竟以后黑苹果要改配置都用得上它。软件下载可以去这里下载,不是 Mac App Store下载的软件，MacOS会启用了新的安全机制检查不让运行，命令行执行sudo spctl --master-disable命令即可运行。 打开了Clover Configurator软件后，切到Mount EFI标签，找到你的U盘名字，点击Mount Partition输入用户密码挂载EFI分区。 挂载之后在访达可以看到盘符，现在这个盘符里面内容是空的，什么也没有把你准备好的EFI文件复制到刚才挂载的U盘的EFI分区即可，注意一定要带EFI文件夹名称 ","date":"2018-05-09","objectID":"/usb-installer/:4:1","tags":["hackintosh"],"title":"制作黑苹果U盘启动器","uri":"/usb-installer/"},{"categories":["折腾"],"content":"方式二 ​ 使用WindowsPE复制你的EFI文件，找一个U盘制作一个WindowsPE启动器，插上你的PEU盘，启动到PE，在PE的环境插入你制作的MacOS启动盘，之后使用DiskGenius软件挂载你的EFI盘符，使用Windows熟悉的方式(鼠标右键复制-粘贴)复制到刚才挂载的U盘的EFI分区即可。 ​ 到这里整个安装介质已经准备完毕了，下面就是把系统安装到你PC硬盘上了。一定要确保你找或你配置的EFI文件是合适你现有硬件的，不然你就算制作成功了U盘启动，到了安装步骤可能连安装向导也出不来。 ","date":"2018-05-09","objectID":"/usb-installer/:4:2","tags":["hackintosh"],"title":"制作黑苹果U盘启动器","uri":"/usb-installer/"}]